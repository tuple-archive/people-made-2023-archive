/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/formie-form-base.js":
/*!************************************!*\
  !*** ./src/js/formie-form-base.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormBase\": () => (/* binding */ FormieFormBase)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _formie_form_theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formie-form-theme */ \"./src/js/formie-form-theme.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar FormieFormBase = /*#__PURE__*/function () {\n  function FormieFormBase($form) {\n    var _this = this;\n\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FormieFormBase);\n\n    this.$form = $form;\n    this.config = config;\n    this.settings = config.settings;\n    this.listeners = {};\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.form = this;\n\n    if (this.settings.outputJsTheme) {\n      this.formTheme = new _formie_form_theme__WEBPACK_IMPORTED_MODULE_1__.FormieFormTheme(this.$form, this.config);\n    } // Add helper classes to fields when their inputs are focused, have values etc.\n\n\n    this.registerFieldEvents(this.$form); // Hijack the form's submit handler, in case we need to do something\n\n    this.addEventListener(this.$form, 'submit', function (e) {\n      e.preventDefault();\n\n      var beforeSubmitEvent = _this.eventObject('onBeforeFormieSubmit', {\n        submitHandler: _this\n      });\n\n      if (!_this.$form.dispatchEvent(beforeSubmitEvent)) {\n        return;\n      } // Add a little delay for UX\n\n\n      setTimeout(function () {\n        // Call the validation hooks\n        if (!_this.validate() || !_this.afterValidate()) {\n          return;\n        } // Trigger Captchas\n\n\n        if (!_this.validateCaptchas()) {\n          return;\n        } // Trigger Payment Integrations\n\n\n        if (!_this.validatePayment()) {\n          return;\n        } // Proceed with submitting the form, which raises other validation events\n\n\n        _this.submitForm();\n      }, 300);\n    }, false);\n  }\n\n  _createClass(FormieFormBase, [{\n    key: \"validate\",\n    value: function validate() {\n      // Create an event for front-end validation (our own JS)\n      var validateEvent = this.eventObject('onFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"afterValidate\",\n    value: function afterValidate() {\n      // Create an event for after validation. This is mostly for third-parties.\n      var afterValidateEvent = this.eventObject('onAfterFormieValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(afterValidateEvent);\n    }\n  }, {\n    key: \"validateCaptchas\",\n    value: function validateCaptchas() {\n      // Create an event for captchas, separate to validation\n      var validateEvent = this.eventObject('onFormieCaptchaValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"validatePayment\",\n    value: function validatePayment() {\n      // Create an event for payments, separate to validation\n      var validateEvent = this.eventObject('onFormiePaymentValidate', {\n        submitHandler: this\n      });\n      return this.$form.dispatchEvent(validateEvent);\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      var submitEvent = this.eventObject('onFormieSubmit', {\n        submitHandler: this\n      });\n\n      if (!this.$form.dispatchEvent(submitEvent)) {\n        return;\n      }\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.formAfterSubmit();\n      } else {\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"formAfterSubmit\",\n    value: function formAfterSubmit() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onAfterFormieSubmit', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"formSubmitError\",\n    value: function formSubmitError() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$form.dispatchEvent(new CustomEvent('onFormieSubmitError', {\n        bubbles: true,\n        detail: data\n      }));\n    }\n  }, {\n    key: \"registerFieldEvents\",\n    value: function registerFieldEvents($element) {\n      var _this2 = this;\n\n      var $wrappers = $element.querySelectorAll('[data-field-type]');\n      $wrappers.forEach(function ($wrapper) {\n        var $input = $wrapper.querySelector('input, select');\n\n        if ($input) {\n          _this2.addEventListener($input, 'input', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('input', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'focus', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('focus', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          _this2.addEventListener($input, 'blur', function (event) {\n            $wrapper.dispatchEvent(new CustomEvent('blur', {\n              bubbles: false,\n              detail: {\n                input: event.target\n              }\n            }));\n          });\n\n          $wrapper.dispatchEvent(new CustomEvent('init', {\n            bubbles: false,\n            detail: {\n              input: $input\n            }\n          }));\n        }\n      });\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(element, event, func) {\n      this.listeners[event] = {\n        element: element,\n        func: func\n      };\n      element.addEventListener(event.split('.')[0], this.listeners[event].func);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(event) {\n      var eventInfo = this.listeners[event] || {};\n\n      if (eventInfo && eventInfo.element && eventInfo.func) {\n        eventInfo.element.removeEventListener(event.split('.')[0], eventInfo.func);\n        delete this.listeners[event];\n      }\n    }\n  }, {\n    key: \"eventObject\",\n    value: function eventObject(name, detail) {\n      return new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detail\n      });\n    }\n  }, {\n    key: \"getClasses\",\n    value: function getClasses(key) {\n      var classes = this.settings.classes || {};\n      return classes[key];\n    }\n  }]);\n\n  return FormieFormBase;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybWllLWZvcm0tYmFzZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBRU8sSUFBTUUsY0FBYjtFQUNJLHdCQUFZQyxLQUFaLEVBQWdDO0lBQUE7O0lBQUEsSUFBYkMsTUFBYSx1RUFBSixFQUFJOztJQUFBOztJQUM1QixLQUFLRCxLQUFMLEdBQWFBLEtBQWI7SUFDQSxLQUFLQyxNQUFMLEdBQWNBLE1BQWQ7SUFDQSxLQUFLQyxRQUFMLEdBQWdCRCxNQUFNLENBQUNDLFFBQXZCO0lBQ0EsS0FBS0MsU0FBTCxHQUFpQixFQUFqQjs7SUFFQSxJQUFJLENBQUMsS0FBS0gsS0FBVixFQUFpQjtNQUNiO0lBQ0g7O0lBRUQsS0FBS0EsS0FBTCxDQUFXSSxJQUFYLEdBQWtCLElBQWxCOztJQUVBLElBQUksS0FBS0YsUUFBTCxDQUFjRyxhQUFsQixFQUFpQztNQUM3QixLQUFLQyxTQUFMLEdBQWlCLElBQUlSLCtEQUFKLENBQW9CLEtBQUtFLEtBQXpCLEVBQWdDLEtBQUtDLE1BQXJDLENBQWpCO0lBQ0gsQ0FkMkIsQ0FnQjVCOzs7SUFDQSxLQUFLTSxtQkFBTCxDQUF5QixLQUFLUCxLQUE5QixFQWpCNEIsQ0FtQjVCOztJQUNBLEtBQUtRLGdCQUFMLENBQXNCLEtBQUtSLEtBQTNCLEVBQWtDLFFBQWxDLEVBQTRDLFVBQUNTLENBQUQsRUFBTztNQUMvQ0EsQ0FBQyxDQUFDQyxjQUFGOztNQUVBLElBQU1DLGlCQUFpQixHQUFHLEtBQUksQ0FBQ0MsV0FBTCxDQUFpQixzQkFBakIsRUFBeUM7UUFDL0RDLGFBQWEsRUFBRTtNQURnRCxDQUF6QyxDQUExQjs7TUFJQSxJQUFJLENBQUMsS0FBSSxDQUFDYixLQUFMLENBQVdjLGFBQVgsQ0FBeUJILGlCQUF6QixDQUFMLEVBQWtEO1FBQzlDO01BQ0gsQ0FUOEMsQ0FXL0M7OztNQUNBSSxVQUFVLENBQUMsWUFBTTtRQUNiO1FBQ0EsSUFBSSxDQUFDLEtBQUksQ0FBQ0MsUUFBTCxFQUFELElBQW9CLENBQUMsS0FBSSxDQUFDQyxhQUFMLEVBQXpCLEVBQStDO1VBQzNDO1FBQ0gsQ0FKWSxDQU1iOzs7UUFDQSxJQUFJLENBQUMsS0FBSSxDQUFDQyxnQkFBTCxFQUFMLEVBQThCO1VBQzFCO1FBQ0gsQ0FUWSxDQVdiOzs7UUFDQSxJQUFJLENBQUMsS0FBSSxDQUFDQyxlQUFMLEVBQUwsRUFBNkI7VUFDekI7UUFDSCxDQWRZLENBZ0JiOzs7UUFDQSxLQUFJLENBQUNDLFVBQUw7TUFDSCxDQWxCUyxFQWtCUCxHQWxCTyxDQUFWO0lBbUJILENBL0JELEVBK0JHLEtBL0JIO0VBZ0NIOztFQXJETDtJQUFBO0lBQUEsT0F1REksb0JBQVc7TUFDUDtNQUNBLElBQU1DLGFBQWEsR0FBRyxLQUFLVCxXQUFMLENBQWlCLGtCQUFqQixFQUFxQztRQUN2REMsYUFBYSxFQUFFO01BRHdDLENBQXJDLENBQXRCO01BSUEsT0FBTyxLQUFLYixLQUFMLENBQVdjLGFBQVgsQ0FBeUJPLGFBQXpCLENBQVA7SUFDSDtFQTlETDtJQUFBO0lBQUEsT0FnRUkseUJBQWdCO01BQ1o7TUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxLQUFLVixXQUFMLENBQWlCLHVCQUFqQixFQUEwQztRQUNqRUMsYUFBYSxFQUFFO01BRGtELENBQTFDLENBQTNCO01BSUEsT0FBTyxLQUFLYixLQUFMLENBQVdjLGFBQVgsQ0FBeUJRLGtCQUF6QixDQUFQO0lBQ0g7RUF2RUw7SUFBQTtJQUFBLE9BeUVJLDRCQUFtQjtNQUNmO01BQ0EsSUFBTUQsYUFBYSxHQUFHLEtBQUtULFdBQUwsQ0FBaUIseUJBQWpCLEVBQTRDO1FBQzlEQyxhQUFhLEVBQUU7TUFEK0MsQ0FBNUMsQ0FBdEI7TUFJQSxPQUFPLEtBQUtiLEtBQUwsQ0FBV2MsYUFBWCxDQUF5Qk8sYUFBekIsQ0FBUDtJQUNIO0VBaEZMO0lBQUE7SUFBQSxPQWtGSSwyQkFBa0I7TUFDZDtNQUNBLElBQU1BLGFBQWEsR0FBRyxLQUFLVCxXQUFMLENBQWlCLHlCQUFqQixFQUE0QztRQUM5REMsYUFBYSxFQUFFO01BRCtDLENBQTVDLENBQXRCO01BSUEsT0FBTyxLQUFLYixLQUFMLENBQVdjLGFBQVgsQ0FBeUJPLGFBQXpCLENBQVA7SUFDSDtFQXpGTDtJQUFBO0lBQUEsT0EyRkksc0JBQWE7TUFDVCxJQUFNRSxXQUFXLEdBQUcsS0FBS1gsV0FBTCxDQUFpQixnQkFBakIsRUFBbUM7UUFDbkRDLGFBQWEsRUFBRTtNQURvQyxDQUFuQyxDQUFwQjs7TUFJQSxJQUFJLENBQUMsS0FBS2IsS0FBTCxDQUFXYyxhQUFYLENBQXlCUyxXQUF6QixDQUFMLEVBQTRDO1FBQ3hDO01BQ0g7O01BRUQsSUFBSSxLQUFLckIsUUFBTCxDQUFjc0IsWUFBZCxLQUErQixNQUFuQyxFQUEyQztRQUN2QyxLQUFLQyxlQUFMO01BQ0gsQ0FGRCxNQUVPO1FBQ0gsS0FBS3pCLEtBQUwsQ0FBVzBCLE1BQVg7TUFDSDtJQUNKO0VBekdMO0lBQUE7SUFBQSxPQTJHSSwyQkFBMkI7TUFBQSxJQUFYQyxJQUFXLHVFQUFKLEVBQUk7TUFDdkIsS0FBSzNCLEtBQUwsQ0FBV2MsYUFBWCxDQUF5QixJQUFJYyxXQUFKLENBQWdCLHFCQUFoQixFQUF1QztRQUM1REMsT0FBTyxFQUFFLElBRG1EO1FBRTVEQyxNQUFNLEVBQUVIO01BRm9ELENBQXZDLENBQXpCO0lBSUg7RUFoSEw7SUFBQTtJQUFBLE9Ba0hJLDJCQUEyQjtNQUFBLElBQVhBLElBQVcsdUVBQUosRUFBSTtNQUN2QixLQUFLM0IsS0FBTCxDQUFXYyxhQUFYLENBQXlCLElBQUljLFdBQUosQ0FBZ0IscUJBQWhCLEVBQXVDO1FBQzVEQyxPQUFPLEVBQUUsSUFEbUQ7UUFFNURDLE1BQU0sRUFBRUg7TUFGb0QsQ0FBdkMsQ0FBekI7SUFJSDtFQXZITDtJQUFBO0lBQUEsT0F5SEksNkJBQW9CSSxRQUFwQixFQUE4QjtNQUFBOztNQUMxQixJQUFNQyxTQUFTLEdBQUdELFFBQVEsQ0FBQ0UsZ0JBQVQsQ0FBMEIsbUJBQTFCLENBQWxCO01BRUFELFNBQVMsQ0FBQ0UsT0FBVixDQUFrQixVQUFDQyxRQUFELEVBQWM7UUFDNUIsSUFBTUMsTUFBTSxHQUFHRCxRQUFRLENBQUNFLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBZjs7UUFFQSxJQUFJRCxNQUFKLEVBQVk7VUFDUixNQUFJLENBQUM1QixnQkFBTCxDQUFzQjRCLE1BQXRCLEVBQThCLE9BQTlCLEVBQXVDLFVBQUNFLEtBQUQsRUFBVztZQUM5Q0gsUUFBUSxDQUFDckIsYUFBVCxDQUF1QixJQUFJYyxXQUFKLENBQWdCLE9BQWhCLEVBQXlCO2NBQzVDQyxPQUFPLEVBQUUsS0FEbUM7Y0FFNUNDLE1BQU0sRUFBRTtnQkFDSlMsS0FBSyxFQUFFRCxLQUFLLENBQUNFO2NBRFQ7WUFGb0MsQ0FBekIsQ0FBdkI7VUFNSCxDQVBEOztVQVNBLE1BQUksQ0FBQ2hDLGdCQUFMLENBQXNCNEIsTUFBdEIsRUFBOEIsT0FBOUIsRUFBdUMsVUFBQ0UsS0FBRCxFQUFXO1lBQzlDSCxRQUFRLENBQUNyQixhQUFULENBQXVCLElBQUljLFdBQUosQ0FBZ0IsT0FBaEIsRUFBeUI7Y0FDNUNDLE9BQU8sRUFBRSxLQURtQztjQUU1Q0MsTUFBTSxFQUFFO2dCQUNKUyxLQUFLLEVBQUVELEtBQUssQ0FBQ0U7Y0FEVDtZQUZvQyxDQUF6QixDQUF2QjtVQU1ILENBUEQ7O1VBU0EsTUFBSSxDQUFDaEMsZ0JBQUwsQ0FBc0I0QixNQUF0QixFQUE4QixNQUE5QixFQUFzQyxVQUFDRSxLQUFELEVBQVc7WUFDN0NILFFBQVEsQ0FBQ3JCLGFBQVQsQ0FBdUIsSUFBSWMsV0FBSixDQUFnQixNQUFoQixFQUF3QjtjQUMzQ0MsT0FBTyxFQUFFLEtBRGtDO2NBRTNDQyxNQUFNLEVBQUU7Z0JBQ0pTLEtBQUssRUFBRUQsS0FBSyxDQUFDRTtjQURUO1lBRm1DLENBQXhCLENBQXZCO1VBTUgsQ0FQRDs7VUFTQUwsUUFBUSxDQUFDckIsYUFBVCxDQUF1QixJQUFJYyxXQUFKLENBQWdCLE1BQWhCLEVBQXdCO1lBQzNDQyxPQUFPLEVBQUUsS0FEa0M7WUFFM0NDLE1BQU0sRUFBRTtjQUNKUyxLQUFLLEVBQUVIO1lBREg7VUFGbUMsQ0FBeEIsQ0FBdkI7UUFNSDtNQUNKLENBdENEO0lBdUNIO0VBbktMO0lBQUE7SUFBQSxPQXFLSSwwQkFBaUJLLE9BQWpCLEVBQTBCSCxLQUExQixFQUFpQ0ksSUFBakMsRUFBdUM7TUFDbkMsS0FBS3ZDLFNBQUwsQ0FBZW1DLEtBQWYsSUFBd0I7UUFBRUcsT0FBTyxFQUFQQSxPQUFGO1FBQVdDLElBQUksRUFBSkE7TUFBWCxDQUF4QjtNQUVBRCxPQUFPLENBQUNqQyxnQkFBUixDQUF5QjhCLEtBQUssQ0FBQ0ssS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FBekIsRUFBOEMsS0FBS3hDLFNBQUwsQ0FBZW1DLEtBQWYsRUFBc0JJLElBQXBFO0lBQ0g7RUF6S0w7SUFBQTtJQUFBLE9BMktJLDZCQUFvQkosS0FBcEIsRUFBMkI7TUFDdkIsSUFBTU0sU0FBUyxHQUFHLEtBQUt6QyxTQUFMLENBQWVtQyxLQUFmLEtBQXlCLEVBQTNDOztNQUVBLElBQUlNLFNBQVMsSUFBSUEsU0FBUyxDQUFDSCxPQUF2QixJQUFrQ0csU0FBUyxDQUFDRixJQUFoRCxFQUFzRDtRQUNsREUsU0FBUyxDQUFDSCxPQUFWLENBQWtCSSxtQkFBbEIsQ0FBc0NQLEtBQUssQ0FBQ0ssS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FBdEMsRUFBMkRDLFNBQVMsQ0FBQ0YsSUFBckU7UUFDQSxPQUFPLEtBQUt2QyxTQUFMLENBQWVtQyxLQUFmLENBQVA7TUFDSDtJQUNKO0VBbExMO0lBQUE7SUFBQSxPQW9MSSxxQkFBWVEsSUFBWixFQUFrQmhCLE1BQWxCLEVBQTBCO01BQ3RCLE9BQU8sSUFBSUYsV0FBSixDQUFnQmtCLElBQWhCLEVBQXNCO1FBQ3pCakIsT0FBTyxFQUFFLElBRGdCO1FBRXpCa0IsVUFBVSxFQUFFLElBRmE7UUFHekJqQixNQUFNLEVBQU5BO01BSHlCLENBQXRCLENBQVA7SUFLSDtFQTFMTDtJQUFBO0lBQUEsT0E0TEksb0JBQVdrQixHQUFYLEVBQWdCO01BQ1osSUFBTUMsT0FBTyxHQUFHLEtBQUsvQyxRQUFMLENBQWMrQyxPQUFkLElBQXlCLEVBQXpDO01BRUEsT0FBT0EsT0FBTyxDQUFDRCxHQUFELENBQWQ7SUFDSDtFQWhNTDs7RUFBQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2Zvcm1pZS1mb3JtLWJhc2UuanM/MGYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0IH0gZnJvbSAnLi91dGlscy91dGlscyc7XG5cbmltcG9ydCB7IEZvcm1pZUZvcm1UaGVtZSB9IGZyb20gJy4vZm9ybWllLWZvcm0tdGhlbWUnO1xuXG5leHBvcnQgY2xhc3MgRm9ybWllRm9ybUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKCRmb3JtLCBjb25maWcgPSB7fSkge1xuICAgICAgICB0aGlzLiRmb3JtID0gJGZvcm07XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gY29uZmlnLnNldHRpbmdzO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuXG4gICAgICAgIGlmICghdGhpcy4kZm9ybSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZm9ybS5mb3JtID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5vdXRwdXRKc1RoZW1lKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1UaGVtZSA9IG5ldyBGb3JtaWVGb3JtVGhlbWUodGhpcy4kZm9ybSwgdGhpcy5jb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGhlbHBlciBjbGFzc2VzIHRvIGZpZWxkcyB3aGVuIHRoZWlyIGlucHV0cyBhcmUgZm9jdXNlZCwgaGF2ZSB2YWx1ZXMgZXRjLlxuICAgICAgICB0aGlzLnJlZ2lzdGVyRmllbGRFdmVudHModGhpcy4kZm9ybSk7XG5cbiAgICAgICAgLy8gSGlqYWNrIHRoZSBmb3JtJ3Mgc3VibWl0IGhhbmRsZXIsIGluIGNhc2Ugd2UgbmVlZCB0byBkbyBzb21ldGhpbmdcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHRoaXMuJGZvcm0sICdzdWJtaXQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBjb25zdCBiZWZvcmVTdWJtaXRFdmVudCA9IHRoaXMuZXZlbnRPYmplY3QoJ29uQmVmb3JlRm9ybWllU3VibWl0Jywge1xuICAgICAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IHRoaXMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLiRmb3JtLmRpc3BhdGNoRXZlbnQoYmVmb3JlU3VibWl0RXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYSBsaXR0bGUgZGVsYXkgZm9yIFVYXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSB2YWxpZGF0aW9uIGhvb2tzXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlKCkgfHwgIXRoaXMuYWZ0ZXJWYWxpZGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIENhcHRjaGFzXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlQ2FwdGNoYXMoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBQYXltZW50IEludGVncmF0aW9uc1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0ZVBheW1lbnQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJvY2VlZCB3aXRoIHN1Ym1pdHRpbmcgdGhlIGZvcm0sIHdoaWNoIHJhaXNlcyBvdGhlciB2YWxpZGF0aW9uIGV2ZW50c1xuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0Rm9ybSgpO1xuICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKCkge1xuICAgICAgICAvLyBDcmVhdGUgYW4gZXZlbnQgZm9yIGZyb250LWVuZCB2YWxpZGF0aW9uIChvdXIgb3duIEpTKVxuICAgICAgICBjb25zdCB2YWxpZGF0ZUV2ZW50ID0gdGhpcy5ldmVudE9iamVjdCgnb25Gb3JtaWVWYWxpZGF0ZScsIHtcbiAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6IHRoaXMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLiRmb3JtLmRpc3BhdGNoRXZlbnQodmFsaWRhdGVFdmVudCk7XG4gICAgfVxuXG4gICAgYWZ0ZXJWYWxpZGF0ZSgpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFuIGV2ZW50IGZvciBhZnRlciB2YWxpZGF0aW9uLiBUaGlzIGlzIG1vc3RseSBmb3IgdGhpcmQtcGFydGllcy5cbiAgICAgICAgY29uc3QgYWZ0ZXJWYWxpZGF0ZUV2ZW50ID0gdGhpcy5ldmVudE9iamVjdCgnb25BZnRlckZvcm1pZVZhbGlkYXRlJywge1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogdGhpcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudChhZnRlclZhbGlkYXRlRXZlbnQpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlQ2FwdGNoYXMoKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBldmVudCBmb3IgY2FwdGNoYXMsIHNlcGFyYXRlIHRvIHZhbGlkYXRpb25cbiAgICAgICAgY29uc3QgdmFsaWRhdGVFdmVudCA9IHRoaXMuZXZlbnRPYmplY3QoJ29uRm9ybWllQ2FwdGNoYVZhbGlkYXRlJywge1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogdGhpcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudCh2YWxpZGF0ZUV2ZW50KTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZVBheW1lbnQoKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhbiBldmVudCBmb3IgcGF5bWVudHMsIHNlcGFyYXRlIHRvIHZhbGlkYXRpb25cbiAgICAgICAgY29uc3QgdmFsaWRhdGVFdmVudCA9IHRoaXMuZXZlbnRPYmplY3QoJ29uRm9ybWllUGF5bWVudFZhbGlkYXRlJywge1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogdGhpcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudCh2YWxpZGF0ZUV2ZW50KTtcbiAgICB9XG5cbiAgICBzdWJtaXRGb3JtKCkge1xuICAgICAgICBjb25zdCBzdWJtaXRFdmVudCA9IHRoaXMuZXZlbnRPYmplY3QoJ29uRm9ybWllU3VibWl0Jywge1xuICAgICAgICAgICAgc3VibWl0SGFuZGxlcjogdGhpcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLiRmb3JtLmRpc3BhdGNoRXZlbnQoc3VibWl0RXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdWJtaXRNZXRob2QgPT09ICdhamF4Jykge1xuICAgICAgICAgICAgdGhpcy5mb3JtQWZ0ZXJTdWJtaXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uc3VibWl0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JtQWZ0ZXJTdWJtaXQoZGF0YSA9IHt9KSB7XG4gICAgICAgIHRoaXMuJGZvcm0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ29uQWZ0ZXJGb3JtaWVTdWJtaXQnLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiBkYXRhLFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZm9ybVN1Ym1pdEVycm9yKGRhdGEgPSB7fSkge1xuICAgICAgICB0aGlzLiRmb3JtLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdvbkZvcm1pZVN1Ym1pdEVycm9yJywge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogZGF0YSxcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyRmllbGRFdmVudHMoJGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgJHdyYXBwZXJzID0gJGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZmllbGQtdHlwZV0nKTtcblxuICAgICAgICAkd3JhcHBlcnMuZm9yRWFjaCgoJHdyYXBwZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0ICRpbnB1dCA9ICR3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LCBzZWxlY3QnKTtcblxuICAgICAgICAgICAgaWYgKCRpbnB1dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigkaW5wdXQsICdpbnB1dCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAkd3JhcHBlci5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJGlucHV0LCAnZm9jdXMnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCRpbnB1dCwgJ2JsdXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXIuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkd3JhcHBlci5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnaW5pdCcsIHtcbiAgICAgICAgICAgICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6ICRpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgZXZlbnQsIGZ1bmMpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0geyBlbGVtZW50LCBmdW5jIH07XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LnNwbGl0KCcuJylbMF0sIHRoaXMubGlzdGVuZXJzW2V2ZW50XS5mdW5jKTtcbiAgICB9XG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2ZW50SW5mbyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XSB8fCB7fTtcblxuICAgICAgICBpZiAoZXZlbnRJbmZvICYmIGV2ZW50SW5mby5lbGVtZW50ICYmIGV2ZW50SW5mby5mdW5jKSB7XG4gICAgICAgICAgICBldmVudEluZm8uZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LnNwbGl0KCcuJylbMF0sIGV2ZW50SW5mby5mdW5jKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1tldmVudF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBldmVudE9iamVjdChuYW1lLCBkZXRhaWwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbCxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Q2xhc3NlcyhrZXkpIHtcbiAgICAgICAgY29uc3QgY2xhc3NlcyA9IHRoaXMuc2V0dGluZ3MuY2xhc3NlcyB8fCB7fTtcblxuICAgICAgICByZXR1cm4gY2xhc3Nlc1trZXldO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJ0IiwiRm9ybWllRm9ybVRoZW1lIiwiRm9ybWllRm9ybUJhc2UiLCIkZm9ybSIsImNvbmZpZyIsInNldHRpbmdzIiwibGlzdGVuZXJzIiwiZm9ybSIsIm91dHB1dEpzVGhlbWUiLCJmb3JtVGhlbWUiLCJyZWdpc3RlckZpZWxkRXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImJlZm9yZVN1Ym1pdEV2ZW50IiwiZXZlbnRPYmplY3QiLCJzdWJtaXRIYW5kbGVyIiwiZGlzcGF0Y2hFdmVudCIsInNldFRpbWVvdXQiLCJ2YWxpZGF0ZSIsImFmdGVyVmFsaWRhdGUiLCJ2YWxpZGF0ZUNhcHRjaGFzIiwidmFsaWRhdGVQYXltZW50Iiwic3VibWl0Rm9ybSIsInZhbGlkYXRlRXZlbnQiLCJhZnRlclZhbGlkYXRlRXZlbnQiLCJzdWJtaXRFdmVudCIsInN1Ym1pdE1ldGhvZCIsImZvcm1BZnRlclN1Ym1pdCIsInN1Ym1pdCIsImRhdGEiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkZXRhaWwiLCIkZWxlbWVudCIsIiR3cmFwcGVycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiJHdyYXBwZXIiLCIkaW5wdXQiLCJxdWVyeVNlbGVjdG9yIiwiZXZlbnQiLCJpbnB1dCIsInRhcmdldCIsImVsZW1lbnQiLCJmdW5jIiwic3BsaXQiLCJldmVudEluZm8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibmFtZSIsImNhbmNlbGFibGUiLCJrZXkiLCJjbGFzc2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/formie-form-base.js\n");

/***/ }),

/***/ "./src/js/formie-form-theme.js":
/*!*************************************!*\
  !*** ./src/js/formie-form-theme.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormieFormTheme\": () => (/* binding */ FormieFormTheme)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _utils_bouncer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/bouncer */ \"./src/js/utils/bouncer.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar FormieFormTheme = /*#__PURE__*/function () {\n  function FormieFormTheme($form) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FormieFormTheme);\n\n    this.$form = $form;\n    this.config = config;\n    this.settings = config.settings;\n    this.validationOnSubmit = !!this.settings.validationOnSubmit;\n    this.validationOnFocus = !!this.settings.validationOnFocus;\n    this.setCurrentPage(this.settings.currentPageId);\n\n    if (!this.$form) {\n      return;\n    }\n\n    this.$form.formTheme = this;\n    this.form = this.$form.form; // Setup classes according to theme config\n\n    this.loadingClass = this.form.getClasses('loading');\n    this.tabErrorClass = this.form.getClasses('tabError');\n    this.tabActiveClass = this.form.getClasses('tabActive');\n    this.errorMessageClass = this.form.getClasses('errorMessage');\n    this.successMessageClass = this.form.getClasses('successMessage');\n    this.alertClass = this.form.getClasses('alert');\n    this.alertErrorClass = this.form.getClasses('alertError');\n    this.alertSuccessClass = this.form.getClasses('alertSuccess');\n    this.tabClass = this.form.getClasses('tab');\n    this.initValidator(); // Check if this is a success page and if we need to hide the notice\n    // This is for non-ajax forms, where the page has reloaded\n\n    this.hideSuccess(); // Hijack the form's submit handler, in case we need to do something\n\n    this.addSubmitEventListener(); // Save the form's current state so we can tell if its changed later on\n\n    this.updateFormHash(); // Listen to form changes if the user tries to reload\n\n    if (this.settings.enableUnloadWarning) {\n      this.addFormUnloadEventListener();\n    } // Listen to tabs being clicked for ajax-enabled forms\n\n\n    if (this.settings.submitMethod === 'ajax') {\n      this.formTabEventListener();\n    }\n  }\n\n  _createClass(FormieFormTheme, [{\n    key: \"initValidator\",\n    value: function initValidator() {\n      var _this = this;\n\n      // Kick off validation - use this even if disabling client-side validation\n      // so we can use a nice API handle server-side errprs\n      var validatorSettings = {\n        fieldClass: 'fui-error',\n        errorClass: this.form.getClasses('fieldError'),\n        fieldPrefix: 'fui-field-',\n        errorPrefix: 'fui-error-',\n        messageAfterField: true,\n        messageCustom: 'data-fui-message',\n        messageTarget: 'data-fui-target',\n        validateOnBlur: this.validationOnFocus,\n        // Call validation on-demand\n        validateOnSubmit: false,\n        disableSubmit: false,\n        customValidations: {},\n        messages: {\n          missingValue: {\n            checkbox: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('This field is required.'),\n            radio: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please select a value.'),\n            select: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please select a value.'),\n            'select-multiple': (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please select at least one value.'),\n            \"default\": (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please fill out this field.')\n          },\n          patternMismatch: {\n            email: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please enter a valid email address.'),\n            url: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please enter a URL.'),\n            number: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please enter a number'),\n            color: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please match the following format: #rrggbb'),\n            date: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please use the YYYY-MM-DD format'),\n            time: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please use the 24-hour time format. Ex. 23:00'),\n            month: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please use the YYYY-MM format'),\n            \"default\": (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please match the requested format.')\n          },\n          outOfRange: {\n            over: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please select a value that is no more than {max}.'),\n            under: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please select a value that is no less than {min}.')\n          },\n          wrongLength: {\n            over: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.'),\n            under: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.')\n          },\n          fallback: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('There was an error with this field.')\n        }\n      }; // Allow other modules to modify our validator settings (for custom rules and messages)\n\n      var registerFormieValidation = new CustomEvent('registerFormieValidation', {\n        bubbles: true,\n        detail: {\n          validatorSettings: validatorSettings\n        }\n      }); // Give a small amount of time for other JS scripts to register validations. These are lazy-loaded.\n      // Maybe re-think this so we don't have to deal with event listener registration before/after dispatch?\n\n      setTimeout(function () {\n        _this.$form.dispatchEvent(registerFormieValidation);\n\n        _this.validator = new _utils_bouncer__WEBPACK_IMPORTED_MODULE_1__.Bouncer(_this.$form, registerFormieValidation.detail.validatorSettings);\n      }, 500); // After we clear any error, validate the fielset again. Mostly so we can remove global errors\n\n      this.form.addEventListener(this.$form, 'bouncerRemoveError', function (e) {\n        // Prevent an infinite loop (check behaviour with an Agree field)\n        // https://github.com/verbb/formie/issues/905\n        if (!_this.submitDebounce) {\n          _this.validate(false);\n        }\n      }); // Override error messages defined in DOM - Bouncer only uses these as a last resort\n      // In future updates, we can probably remove this\n\n      this.form.addEventListener(this.$form, 'bouncerShowError', function (e) {\n        var message = null;\n        var $field = e.target;\n        var $fieldContainer = $field.closest('[data-field-type]'); // Get the error message as defined on the input element. Use the parent to find the element\n        // just to cater for some edge-cases where there might be multiple inputs (Datepicker).\n\n        var $message = $field.parentNode.querySelector('[data-fui-message]');\n\n        if ($message) {\n          message = $message.getAttribute('data-fui-message');\n        } // If there's a server error, it takes priority.\n\n\n        if (e.detail && e.detail.errors && e.detail.errors.serverMessage) {\n          message = e.detail.errors.serverMessage;\n        } // Check if we need to move the error out of the .fui-input-container node.\n        // Only the input itself should be in here.\n\n\n        var $errorToMove = $field.parentNode.querySelector('[data-error-message]');\n\n        if ($errorToMove && $errorToMove.parentNode.parentNode) {\n          $errorToMove.parentNode.parentNode.appendChild($errorToMove);\n        } // The error has been moved, find it again\n\n\n        if ($fieldContainer) {\n          var $error = $fieldContainer.querySelector('[data-error-message]');\n\n          if ($error && message) {\n            $error.textContent = message;\n          }\n        }\n      }, false);\n    }\n  }, {\n    key: \"addSubmitEventListener\",\n    value: function addSubmitEventListener() {\n      var _this2 = this;\n\n      var $submitBtns = this.$form.querySelectorAll('[type=\"submit\"]'); // Forms can have multiple submit buttons, and its easier to assign the currently clicked one\n      // than tracking it through the submit handler.\n\n      $submitBtns.forEach(function ($submitBtn) {\n        _this2.form.addEventListener($submitBtn, 'click', function (e) {\n          _this2.$submitBtn = e.target; // Store for later if we're using text spinner\n\n          _this2.originalButtonText = _this2.$submitBtn.textContent.trim();\n          var submitAction = _this2.$submitBtn.getAttribute('data-submit-action') || 'submit'; // Each submit button can do different things, to store that\n\n          _this2.updateSubmitAction(submitAction);\n        });\n      });\n      this.form.addEventListener(this.$form, 'onBeforeFormieSubmit', this.onBeforeSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieValidate', this.onValidate.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmit', this.onSubmit.bind(this));\n      this.form.addEventListener(this.$form, 'onFormieSubmitError', this.onSubmitError.bind(this));\n    }\n  }, {\n    key: \"onBeforeSubmit\",\n    value: function onBeforeSubmit(e) {\n      this.beforeSubmit(); // Save for later to trigger real submit\n\n      this.submitHandler = e.detail.submitHandler;\n    }\n  }, {\n    key: \"onValidate\",\n    value: function onValidate(e) {\n      // If invalid, we only want to stop if we're submitting.\n      if (!this.validate()) {\n        this.onFormError(); // Set a flag on the event, so other listeners can potentially do something\n\n        e.detail.invalid = true;\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      // Stop base behaviour of just submitting the form\n      e.preventDefault(); // Either staight submit, or use Ajax\n\n      if (this.settings.submitMethod === 'ajax') {\n        this.ajaxSubmit();\n      } else {\n        // Before a server-side submit, refresh the saved hash immediately. Otherwise, the native submit\n        // handler - which technically unloads the page - will trigger the changed alert.\n        // But trigger an alert if we're going back, and back-submission data isn't set\n        if (!this.settings.enableBackSubmission && this.form.submitAction === 'back') {// Don't reset the hash, trigger a warning if content has changed, because we're not submitting\n        } else {\n          this.updateFormHash();\n        } // Triger any JS events for this page, only if submitting (not going back/saving)\n\n\n        if (this.form.submitAction === 'submit') {\n          this.triggerJsEvents();\n        }\n\n        this.$form.submit();\n      }\n    }\n  }, {\n    key: \"onSubmitError\",\n    value: function onSubmitError(e) {\n      this.onFormError();\n    }\n  }, {\n    key: \"addFormUnloadEventListener\",\n    value: function addFormUnloadEventListener() {\n      var _this3 = this;\n\n      this.form.addEventListener(window, 'beforeunload', function (e) {\n        if (_this3.savedFormHash !== _this3.hashForm()) {\n          e.preventDefault();\n          return e.returnValue = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Are you sure you want to leave?');\n        }\n      });\n    }\n  }, {\n    key: \"formTabEventListener\",\n    value: function formTabEventListener() {\n      var _this4 = this;\n\n      var $tabs = this.$form.querySelectorAll('[data-fui-page-tab-anchor]');\n      $tabs.forEach(function ($tab) {\n        _this4.form.addEventListener($tab, 'click', function (e) {\n          e.preventDefault();\n          var pageIndex = e.target.getAttribute('data-fui-page-index');\n          var pageId = e.target.getAttribute('data-fui-page-id');\n\n          _this4.togglePage({\n            nextPageIndex: pageIndex,\n            nextPageId: pageId,\n            totalPages: _this4.settings.pages.length\n          }); // Ensure we still update the current page server-side\n\n\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', e.target.getAttribute('href'), true);\n          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.setRequestHeader('Cache-Control', 'no-cache');\n          xhr.send();\n        });\n      });\n    }\n  }, {\n    key: \"hashForm\",\n    value: function hashForm() {\n      var hash = {};\n      var formData = new FormData(this.$form); // Exlcude some params from the hash, that are programatically changed\n\n      var excludedItems = ['g-recaptcha-response', 'h-captcha-response', 'CRAFT_CSRF_TOKEN', '__JSCHK', 'submitAction'];\n\n      var _iterator = _createForOfIteratorHelper(formData.entries()),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var pair = _step.value;\n          var isExcluded = excludedItems.filter(function (item) {\n            return pair[0].startsWith(item);\n          });\n\n          if (!isExcluded.length) {\n            // eslint-disable-next-line\n            hash[pair[0]] = pair[1];\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return JSON.stringify(hash);\n    }\n  }, {\n    key: \"updateFormHash\",\n    value: function updateFormHash() {\n      this.savedFormHash = this.hashForm();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var _this5 = this;\n\n      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!this.validationOnSubmit) {\n        return true;\n      } // Only validate on submit actions\n\n\n      if (this.form.submitAction !== 'submit') {\n        return true;\n      }\n\n      var $fieldset = this.$form;\n\n      if (this.$currentPage) {\n        $fieldset = this.$currentPage;\n      }\n\n      var invalidFields = this.validator.validateAll($fieldset); // If there are errors, focus on the first one\n\n      if (invalidFields.length > 0 && focus) {\n        invalidFields[0].focus();\n      } // Remove any global errors if none - just in case\n\n\n      if (invalidFields.length === 0) {\n        this.removeFormAlert();\n      } // Set the debounce after a little bit, to prevent an infinite loop, as this method\n      // is called on `bouncerRemoveError`.\n\n\n      this.submitDebounce = true;\n      setTimeout(function () {\n        _this5.submitDebounce = false;\n      }, 500);\n      return !invalidFields.length;\n    }\n  }, {\n    key: \"hideSuccess\",\n    value: function hideSuccess() {\n      var $successMessage = this.$form.parentNode.querySelector(\".\".concat(this.successMessageClass));\n\n      if ($successMessage && this.settings.submitActionMessageTimeout) {\n        var timeout = parseInt(this.settings.submitActionMessageTimeout, 10) * 1000;\n        setTimeout(function () {\n          $successMessage.remove();\n        }, timeout);\n      }\n    }\n  }, {\n    key: \"addLoading\",\n    value: function addLoading() {\n      if (this.$submitBtn) {\n        // Always disable the button\n        this.$submitBtn.setAttribute('disabled', true);\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.add(this.loadingClass);\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.settings.loadingIndicatorText;\n        }\n      }\n    }\n  }, {\n    key: \"removeLoading\",\n    value: function removeLoading() {\n      if (this.$submitBtn) {\n        // Always enable the button\n        this.$submitBtn.removeAttribute('disabled');\n\n        if (this.settings.loadingIndicator === 'spinner') {\n          this.$submitBtn.classList.remove(this.loadingClass);\n        }\n\n        if (this.settings.loadingIndicator === 'text') {\n          this.$submitBtn.textContent = this.originalButtonText;\n        }\n      }\n    }\n  }, {\n    key: \"onFormError\",\n    value: function onFormError(errorMessage) {\n      if (errorMessage) {\n        this.showFormAlert(errorMessage, 'error');\n      } else {\n        this.showFormAlert(this.settings.errorMessage, 'error');\n      }\n\n      this.removeLoading();\n    }\n  }, {\n    key: \"showFormAlert\",\n    value: function showFormAlert(text, type) {\n      var $alert = this.$form.parentNode.querySelector('[role=\"alert\"]'); // Strip <p> tags\n\n      text = text.replace(/<p[^>]*>/g, '').replace(/<\\/p>/g, '');\n\n      if ($alert) {\n        // We have to cater for HTML entities - quick-n-dirty\n        if ($alert.innerHTML !== this.decodeHtml(text)) {\n          $alert.innerHTML = \"\".concat($alert.innerHTML, \"<br>\").concat(text);\n        }\n      } else {\n        $alert = document.createElement('div');\n        $alert.className = this.alertClass;\n        $alert.setAttribute('role', 'alert');\n        $alert.innerHTML = text; // For error notices, we have potential special handling on position\n\n        if (type == 'error') {\n          $alert.className += \" \".concat(this.alertErrorClass, \" \").concat(this.alertClass, \"-\").concat(this.settings.errorMessagePosition);\n\n          if (this.settings.errorMessagePosition == 'bottom-form') {\n            this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n          } else if (this.settings.errorMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        } else {\n          $alert.className += \" \".concat(this.alertSuccessClass, \" \").concat(this.alertClass, \"-\").concat(this.settings.submitActionMessagePosition);\n\n          if (this.settings.submitActionMessagePosition == 'bottom-form') {\n            // An even further special case when hiding the form!\n            if (this.settings.submitActionFormHide) {\n              this.$form.parentNode.insertBefore($alert, this.$form);\n            } else if (this.$submitBtn.parentNode) {\n              // Check if there's a submit button still. Might've been removed for multi-page, ajax.\n              this.$submitBtn.parentNode.parentNode.insertBefore($alert, this.$submitBtn.parentNode);\n            } else {\n              this.$form.parentNode.insertBefore($alert, this.$form.nextSibling);\n            }\n          } else if (this.settings.submitActionMessagePosition == 'top-form') {\n            this.$form.parentNode.insertBefore($alert, this.$form);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"showTabErrors\",\n    value: function showTabErrors(errors) {\n      var _this6 = this;\n\n      Object.keys(errors).forEach(function (pageId, index) {\n        var $tab = _this6.$form.parentNode.querySelector(\"[data-fui-page-id=\\\"\".concat(pageId, \"\\\"]\"));\n\n        if ($tab) {\n          $tab.parentNode.classList.add(_this6.tabErrorClass);\n        }\n      });\n    }\n  }, {\n    key: \"decodeHtml\",\n    value: function decodeHtml(html) {\n      var txt = document.createElement('textarea');\n      txt.innerHTML = html;\n      return txt.value;\n    }\n  }, {\n    key: \"removeFormAlert\",\n    value: function removeFormAlert() {\n      var $alert = this.$form.parentNode.querySelector(\".\".concat(this.alertClass));\n\n      if ($alert) {\n        $alert.remove();\n      }\n    }\n  }, {\n    key: \"removeTabErrors\",\n    value: function removeTabErrors() {\n      var _this7 = this;\n\n      var $tabs = this.$form.parentNode.querySelectorAll('[data-fui-page-tab]');\n      $tabs.forEach(function ($tab) {\n        $tab.classList.remove(_this7.tabErrorClass);\n      });\n    }\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var _this8 = this;\n\n      // Remove all validation errors\n      Array.prototype.filter.call(this.$form.querySelectorAll('input, select, textarea'), function ($field) {\n        _this8.validator.removeError($field);\n      });\n      this.removeFormAlert();\n      this.removeTabErrors(); // Don't set a loading if we're going back and the unload warning appears, because there's no way to re-enable\n      // the button after the user cancels the unload event\n\n      if (!this.settings.enableBackSubmission && this.form.submitAction === 'back') {// Do nothing\n      } else {\n        this.addLoading();\n      }\n    }\n  }, {\n    key: \"ajaxSubmit\",\n    value: function ajaxSubmit() {\n      var _this9 = this;\n\n      var formData = new FormData(this.$form);\n      var method = this.$form.getAttribute('method');\n      var action = this.$form.getAttribute('action');\n      var xhr = new XMLHttpRequest();\n      xhr.open(method ? method : 'POST', action ? action : window.location.href, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.timeout = (this.settings.ajaxTimeout || 10) * 1000;\n      this.beforeSubmit();\n\n      xhr.ontimeout = function () {\n        _this9.onAjaxError((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('The request timed out.'));\n      };\n\n      xhr.onerror = function (e) {\n        _this9.onAjaxError((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('The request encountered a network error. Please try again.'));\n      };\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            var response = JSON.parse(xhr.responseText);\n\n            if (response.errors) {\n              _this9.onAjaxError(response.errorMessage, response);\n            } else {\n              _this9.onAjaxSuccess(response);\n            }\n          } catch (e) {\n            _this9.onAjaxError((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.t)('Unable to parse response `{e}`.', {\n              e: e\n            }));\n          }\n        } else {\n          _this9.onAjaxError(\"\".concat(xhr.status, \": \").concat(xhr.statusText));\n        }\n      };\n\n      xhr.send(formData);\n    }\n  }, {\n    key: \"afterAjaxSubmit\",\n    value: function afterAjaxSubmit(data) {\n      var _this10 = this;\n\n      // Reset the submit action, immediately, whether fail or success\n      this.updateSubmitAction('submit');\n      this.updateSubmissionInput(data); // Check if there's any events in the response back, and fire them\n\n      if (data.events && Array.isArray(data.events)) {\n        // An error message may be shown in some cases (for 3D secure) so remove the form-global level error notice.\n        this.removeFormAlert();\n        data.events.forEach(function (eventData) {\n          _this10.$form.dispatchEvent(new CustomEvent(eventData.event, {\n            bubbles: true,\n            detail: {\n              data: eventData.data\n            }\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"onAjaxError\",\n    value: function onAjaxError(errorMessage) {\n      var _this11 = this;\n\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var errors = data.errors || {};\n      var pageFieldErrors = data.pageFieldErrors || {}; // Show an error message at the top of the form\n\n      this.onFormError(errorMessage); // Update the page tabs (if any) to show error state\n\n      this.showTabErrors(pageFieldErrors); // Fire a fail event\n\n      this.submitHandler.formSubmitError(); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Show server-side errors for each field\n\n      Object.keys(errors).forEach(function (handle, index) {\n        var _errors$handle = _slicedToArray(errors[handle], 1),\n            error = _errors$handle[0];\n\n        var selector = handle.split('.');\n        selector = selector.join('][');\n\n        var $field = _this11.$form.querySelector(\"[name=\\\"fields[\".concat(selector, \"]\\\"]\")); // Check for multiple fields\n\n\n        if (!$field) {\n          $field = _this11.$form.querySelector(\"[name=\\\"fields[\".concat(selector, \"][]\\\"]\"));\n        } // Handle Repeater/Groups - a little more complicated to translate `group[0].field.handle`\n\n\n        if (!$field && handle.includes('[')) {\n          var blockIndex = handle.match(/\\[(.*?)\\]/)[1] || null;\n          var regexString = \"fields[\".concat(handle.replace(/\\./g, '][').replace(']]', ']').replace(/\\[.*?\\]/, '][rows][.*][fields]'), \"]\");\n          regexString = regexString.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]');\n\n          var $targets = _this11.querySelectorAllRegex(new RegExp(regexString), 'name');\n\n          if ($targets.length && $targets[blockIndex]) {\n            $field = $targets[blockIndex];\n          }\n        }\n\n        if ($field) {\n          _this11.validator.showError($field, {\n            serverMessage: error\n          }); // Focus on the first error\n\n\n          if (index === 0) {\n            $field.focus();\n          }\n        }\n      }); // Go to the first page with an error, for good UX\n\n      this.togglePage(data, false);\n    }\n  }, {\n    key: \"onAjaxSuccess\",\n    value: function onAjaxSuccess(data) {\n      // Fire the event, because we've overridden the handler\n      this.submitHandler.formAfterSubmit(data); // Fire cleanup methods after _any_ ajax call\n\n      this.afterAjaxSubmit(data); // Reset the form hash, as all has been saved\n\n      this.updateFormHash(); // Triger any JS events for this page, right away before navigating away\n\n      if (this.form.submitAction === 'submit') {\n        this.triggerJsEvents();\n      } // Check if we need to proceed to the next page\n\n\n      if (data.nextPageId) {\n        this.removeLoading();\n        this.togglePage(data);\n        return;\n      } // If we're redirecting away, do it immediately for nicer UX\n\n\n      if (data.redirectUrl) {\n        if (this.settings.submitActionTab === 'new-tab') {\n          // Reset values if in a new tab. No need when in the same tab.\n          this.$form.reset();\n          window.open(data.redirectUrl, '_blank');\n        } else {\n          window.location.href = data.redirectUrl;\n        }\n\n        return;\n      } // Delay this a little, in case we're redirecting away - better UX to just keep it loading\n\n\n      this.removeLoading(); // For multi-page ajax forms, deal with them a little differently.\n\n      if (data.totalPages > 1) {\n        // If we have a success message at the top, go to the first page\n        if (this.settings.submitActionMessagePosition == 'top-form') {\n          this.togglePage({\n            nextPageIndex: 0,\n            nextPageId: this.settings.pages[0].id,\n            totalPages: this.settings.pages.length\n          });\n        } else {\n          // Otherwise, we want to hide the buttons because we have to stay on the last page\n          // to show the success message at the bottom of the form. Otherwise, showing it on the\n          // first page of an empty form is just plain weird UX.\n          if (this.$submitBtn) {\n            this.$submitBtn.remove();\n          } // Remove the back button - not great UX to go back to a finished form\n          // Remember, its the button and the hidden input\n\n\n          var $backButtonInputs = this.$form.querySelectorAll('[data-submit-action=\"back\"]');\n          $backButtonInputs.forEach(function ($backButtonInput) {\n            $backButtonInput.remove();\n          });\n        }\n      }\n\n      if (this.settings.submitAction === 'message') {\n        // Allow the submit action message to be sent from the response, or fallback to static.\n        var submitActionMessage = data.submitActionMessage || this.settings.submitActionMessage;\n        this.showFormAlert(submitActionMessage, 'success'); // Check if we need to remove the success message\n\n        this.hideSuccess();\n\n        if (this.settings.submitActionFormHide) {\n          this.$form.style.display = 'none';\n        } // Smooth-scroll to the top of the form.\n\n\n        if (this.settings.scrollToTop) {\n          this.scrollToForm();\n        }\n      } // Reset values regardless, for the moment\n\n\n      this.$form.reset(); // Remove the submission ID input in case we want to go again\n\n      this.removeHiddenInput('submissionId'); // Reset the form hash, as all has been saved\n\n      this.updateFormHash();\n    }\n  }, {\n    key: \"updateSubmitAction\",\n    value: function updateSubmitAction(action) {\n      // All buttons should have a `[data-submit-action]` but just for backward-compatibility\n      // assume when not present, we're submitting\n      if (!action) {\n        action = 'submit';\n      } // Update the submit action on the form while we're at it. Store on the `$form`\n      // for each of lookup on event hooks like captchas.\n\n\n      this.form.submitAction = action;\n      this.updateOrCreateHiddenInput('submitAction', action);\n    }\n  }, {\n    key: \"updateSubmissionInput\",\n    value: function updateSubmissionInput(data) {\n      if (!data.submissionId || !data.nextPageId) {\n        return;\n      } // Add the hidden submission input, if it doesn't exist\n\n\n      this.updateOrCreateHiddenInput('submissionId', data.submissionId);\n    }\n  }, {\n    key: \"updateOrCreateHiddenInput\",\n    value: function updateOrCreateHiddenInput(name, value) {\n      var $input = this.$form.querySelector(\"[name=\\\"\".concat(name, \"\\\"][type=\\\"hidden\\\"]\"));\n\n      if (!$input) {\n        $input = document.createElement('input');\n        $input.setAttribute('type', 'hidden');\n        $input.setAttribute('name', name);\n        this.$form.appendChild($input);\n      }\n\n      $input.setAttribute('value', value);\n    }\n  }, {\n    key: \"removeHiddenInput\",\n    value: function removeHiddenInput(name) {\n      var $input = this.$form.querySelector(\"[name=\\\"\".concat(name, \"\\\"][type=\\\"hidden\\\"]\"));\n\n      if ($input) {\n        $input.parentNode.removeChild($input);\n      }\n    }\n  }, {\n    key: \"togglePage\",\n    value: function togglePage(data) {\n      var _this12 = this;\n\n      var scrollToTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Trigger an event when a page is toggled\n      this.$form.dispatchEvent(new CustomEvent('onFormiePageToggle', {\n        bubbles: true,\n        detail: {\n          data: data\n        }\n      })); // Hide all pages\n\n      var $allPages = this.$form.querySelectorAll('[data-fui-page]');\n\n      if (data.nextPageId) {\n        $allPages.forEach(function ($page) {\n          // Show the current page\n          if ($page.id === \"\".concat(_this12.getPageId(data.nextPageId))) {\n            $page.removeAttribute('data-fui-page-hidden');\n          } else {\n            $page.setAttribute('data-fui-page-hidden', true);\n          }\n        });\n      } // Update tabs and progress bar if we're using them\n\n\n      var $progress = this.$form.querySelector('[data-fui-progress-bar]');\n\n      if ($progress && data.nextPageIndex) {\n        var pageIndex = parseInt(data.nextPageIndex, 10) + 1;\n        var progress = Math.round(pageIndex / data.totalPages * 100);\n        $progress.style.width = \"\".concat(progress, \"%\");\n        $progress.setAttribute('aria-valuenow', progress);\n        $progress.textContent = \"\".concat(progress, \"%\");\n      }\n\n      var $tabs = this.$form.querySelectorAll('[data-fui-page-tab]');\n\n      if (data.nextPageId) {\n        $tabs.forEach(function ($tab) {\n          // Show the current page\n          if ($tab.id === \"\".concat(_this12.tabClass, \"-\").concat(data.nextPageId)) {\n            $tab.classList.add(_this12.tabActiveClass);\n          } else {\n            $tab.classList.remove(_this12.tabActiveClass);\n          }\n        }); // Update the current page\n\n        this.setCurrentPage(data.nextPageId);\n      } // Smooth-scroll to the top of the form.\n\n\n      if (this.settings.scrollToTop) {\n        this.scrollToForm();\n      }\n    }\n  }, {\n    key: \"setCurrentPage\",\n    value: function setCurrentPage(pageId) {\n      this.settings.currentPageId = pageId;\n      this.$currentPage = this.$form.querySelector(\"#\".concat(this.getPageId(pageId)));\n    }\n  }, {\n    key: \"getCurrentPage\",\n    value: function getCurrentPage() {\n      var _this13 = this;\n\n      return this.settings.pages.find(function (page) {\n        return page.id == _this13.settings.currentPageId;\n      });\n    }\n  }, {\n    key: \"getCurrentPageIndex\",\n    value: function getCurrentPageIndex() {\n      var currentPage = this.getCurrentPage();\n\n      if (currentPage) {\n        return this.settings.pages.indexOf(currentPage);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getPageId\",\n    value: function getPageId(pageId) {\n      return \"\".concat(this.config.formHashId, \"-p-\").concat(pageId);\n    }\n  }, {\n    key: \"scrollToForm\",\n    value: function scrollToForm() {\n      // Check for scroll-padding-top or `scroll-margin-top`\n      var extraPadding = (document.documentElement.style['scroll-padding-top'] || '0px').replace('px', '');\n      var extraMargin = (document.documentElement.style['scroll-margin-top'] || '0px').replace('px', ''); // Because the form can be hidden, use the parent wrapper\n\n      window.scrollTo({\n        top: this.$form.parentNode.getBoundingClientRect().top + window.pageYOffset - 100 - extraPadding - extraMargin,\n        behavior: 'smooth'\n      });\n    }\n  }, {\n    key: \"triggerJsEvents\",\n    value: function triggerJsEvents() {\n      var currentPage = this.getCurrentPage(); // Find any JS events for the current page and fire\n\n      if (currentPage && currentPage.settings.enableJsEvents) {\n        var payload = {};\n        currentPage.settings.jsGtmEventOptions.forEach(function (option) {\n          payload[option.label] = option.value;\n        }); // Push to the datalayer\n\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push(payload);\n      }\n    }\n  }, {\n    key: \"querySelectorAllRegex\",\n    value: function querySelectorAllRegex(regex, attributeToSearch) {\n      var output = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.$form.querySelectorAll(\"[\".concat(attributeToSearch, \"]\"))),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var element = _step2.value;\n\n          if (regex.test(element.getAttribute(attributeToSearch))) {\n            output.push(element);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return output;\n    }\n  }]);\n\n  return FormieFormTheme;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-form-theme.js\n");

/***/ }),

/***/ "./src/js/formie-lib.js":
/*!******************************!*\
  !*** ./src/js/formie-lib.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Formie\": () => (/* binding */ Formie)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _formie_form_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formie-form-base */ \"./src/js/formie-form-base.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n\n\nvar Formie = /*#__PURE__*/function () {\n  function Formie() {\n    _classCallCheck(this, Formie);\n\n    this.forms = [];\n  }\n\n  _createClass(Formie, [{\n    key: \"initForms\",\n    value: function initForms() {\n      var _this = this;\n\n      this.$forms = document.querySelectorAll('form[data-fui-form]') || []; // We use this in the CP, where it's a bit tricky to add a form ID. So check just in case.\n      // Might also be handy for front-end too!\n\n      if (!this.$forms.length) {\n        this.$forms = document.querySelectorAll('div[data-fui-form]') || [];\n      }\n\n      this.$forms.forEach(function ($form) {\n        _this.initForm($form);\n      }); // Emit a custom event to let scripts know the Formie class is ready\n\n      document.dispatchEvent(new CustomEvent('onFormieInit', {\n        bubbles: true,\n        detail: {\n          formie: this\n        }\n      }));\n    }\n  }, {\n    key: \"initForm\",\n    value: function initForm($form) {\n      var _this2 = this;\n\n      var formConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        // Initialize the form class with the `data-fui-form` param on the form\n        formConfig = JSON.parse($form.getAttribute('data-fui-form'));\n      }\n\n      if ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(formConfig)) {\n        console.error('Unable to parse `data-fui-form` form attribute for config. Ensure this attribute exists on your form and contains valid JSON.');\n        return;\n      } // See if we need to init additional, conditional JS (field, captchas, etc)\n\n\n      var registeredJs = formConfig.registeredJs || []; // Add an instance to this factory to the form config\n\n      formConfig.Formie = this; // Create the form class, save it to our collection\n\n      var form = new _formie_form_base__WEBPACK_IMPORTED_MODULE_1__.FormieFormBase($form, formConfig);\n      this.forms.push(form); // Find all `data-field-config` attributes for the current page and form\n      // and build an object of them to initialize when loaded.\n\n      form.fieldConfigs = this.parseFieldConfig($form, $form); // Is there any additional JS config registered for this form?\n\n      if (registeredJs.length) {\n        // Create a container to add these items to, so we can destroy them later\n        form.$registeredJs = document.createElement('div');\n        form.$registeredJs.setAttribute('data-fui-scripts', formConfig.formId);\n        document.body.appendChild(form.$registeredJs); // Create a `<script>` for each registered JS\n\n        registeredJs.forEach(function (config) {\n          var $script = document.createElement('script'); // Check if we've provided an external script to load. Ensure they're deferred so they don't block\n          // and use the onload call to trigger any actual scripts once its been loaded.\n\n          if (config.src) {\n            $script.src = config.src;\n            $script.defer = true; // Initialize all matching fields - their config is already rendered in templates\n\n            $script.onload = function () {\n              if (config.module) {\n                var fieldConfigs = form.fieldConfigs[config.module]; // Handle multiple fields on a page, creating a new JS class instance for each\n\n                if (fieldConfigs && Array.isArray(fieldConfigs) && fieldConfigs.length) {\n                  fieldConfigs.forEach(function (fieldConfig) {\n                    _this2.initJsClass(config.module, fieldConfig);\n                  });\n                } // Handle integrations that have global settings, instead of per-field\n\n\n                if (config.settings) {\n                  _this2.initJsClass(config.module, _objectSpread({\n                    $form: $form\n                  }, config.settings));\n                } // Special handling for some JS modules\n\n\n                if (config.module === 'FormieConditions') {\n                  _this2.initJsClass(config.module, {\n                    $form: $form\n                  });\n                }\n              }\n            };\n          }\n\n          form.$registeredJs.appendChild($script);\n        });\n      }\n    }\n  }, {\n    key: \"initJsClass\",\n    value: function initJsClass(className, params) {\n      var moduleClass = window[className];\n\n      if (moduleClass) {\n        new moduleClass(params);\n      }\n    } // Note the use of $form and $element to handle Repeater\n\n  }, {\n    key: \"parseFieldConfig\",\n    value: function parseFieldConfig($element, $form) {\n      var config = {};\n      $element.querySelectorAll('[data-field-config]').forEach(function ($field) {\n        var fieldConfig = JSON.parse($field.getAttribute('data-field-config')); // Some fields supply multiple modules, so normalise for ease-of-processing\n\n        if (!Array.isArray(fieldConfig)) {\n          fieldConfig = [fieldConfig];\n        }\n\n        fieldConfig.forEach(function (nestedFieldConfig) {\n          if (!config[nestedFieldConfig.module]) {\n            config[nestedFieldConfig.module] = [];\n          } // Provide field classes with the data they need\n\n\n          config[nestedFieldConfig.module].push(_objectSpread({\n            $form: $form,\n            $field: $field\n          }, nestedFieldConfig));\n        });\n      });\n      return config;\n    }\n  }, {\n    key: \"getForm\",\n    value: function getForm($form) {\n      return this.forms.find(function (form) {\n        return form.$form == $form;\n      });\n    }\n  }, {\n    key: \"getFormById\",\n    value: function getFormById(id) {\n      // eslint-disable-next-line array-callback-return\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formId == id;\n        }\n      });\n    }\n  }, {\n    key: \"getFormByHandle\",\n    value: function getFormByHandle(handle) {\n      // eslint-disable-next-line array-callback-return\n      return this.forms.find(function (form) {\n        if (form.config) {\n          return form.config.formHandle == handle;\n        }\n      });\n    }\n  }, {\n    key: \"destroyForm\",\n    value: function destroyForm($form) {\n      var form = this.getForm($form);\n\n      if (!form) {\n        return;\n      }\n\n      var index = this.forms.indexOf(form);\n\n      if (index === -1) {\n        return;\n      } // Delete any additional scripts for the form - if any\n\n\n      if (form.$registeredJs && form.$registeredJs.parentNode) {\n        form.$registeredJs.parentNode.removeChild(form.$registeredJs);\n      } // Remove all event listeners attached to this form\n\n\n      if (!(0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(form.listeners)) {\n        Object.keys(form.listeners).forEach(function (eventKey) {\n          form.removeEventListener(eventKey);\n        });\n      } // Destroy Bouncer events\n\n\n      if (form.formTheme && form.formTheme.validator) {\n        form.formTheme.validator.destroy();\n      } // Delete it from the factory\n\n\n      delete this.forms[index];\n    }\n  }]);\n\n  return Formie;\n}();\nwindow.Formie = Formie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/formie-lib.js\n");

/***/ }),

/***/ "./src/js/formie.js":
/*!**************************!*\
  !*** ./src/js/formie.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/polyfills */ \"./src/js/utils/polyfills.js\");\n/* harmony import */ var _formie_lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formie-lib */ \"./src/js/formie-lib.js\");\n\n // This should only be used when initializing Formie from the browser. When initializing with JS directly\n// import `formie-lib.js` directly into your JS modules.\n\nwindow.Formie = new _formie_lib__WEBPACK_IMPORTED_MODULE_1__.Formie(); // Don't init forms until the document is ready, or the document already loaded\n// https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event#checking_whether_loading_is_already_complete\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', function (event) {\n    window.Formie.initForms();\n  });\n} else {\n  window.Formie.initForms();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZm9ybWllLmpzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBO0NBR0E7QUFDQTs7QUFDQUMsTUFBTSxDQUFDRCxNQUFQLEdBQWdCLElBQUlBLCtDQUFKLEVBQWhCLEVBRUE7QUFDQTs7QUFDQSxJQUFJRSxRQUFRLENBQUNDLFVBQVQsS0FBd0IsU0FBNUIsRUFBdUM7RUFDbkNELFFBQVEsQ0FBQ0UsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFVBQUNDLEtBQUQsRUFBVztJQUNyREosTUFBTSxDQUFDRCxNQUFQLENBQWNNLFNBQWQ7RUFDSCxDQUZEO0FBR0gsQ0FKRCxNQUlPO0VBQ0hMLE1BQU0sQ0FBQ0QsTUFBUCxDQUFjTSxTQUFkO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZm9ybWllLmpzP2ZjNmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL3V0aWxzL3BvbHlmaWxscyc7XG5pbXBvcnQgeyBGb3JtaWUgfSBmcm9tICcuL2Zvcm1pZS1saWInO1xuXG4vLyBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiBpbml0aWFsaXppbmcgRm9ybWllIGZyb20gdGhlIGJyb3dzZXIuIFdoZW4gaW5pdGlhbGl6aW5nIHdpdGggSlMgZGlyZWN0bHlcbi8vIGltcG9ydCBgZm9ybWllLWxpYi5qc2AgZGlyZWN0bHkgaW50byB5b3VyIEpTIG1vZHVsZXMuXG53aW5kb3cuRm9ybWllID0gbmV3IEZvcm1pZSgpO1xuXG4vLyBEb24ndCBpbml0IGZvcm1zIHVudGlsIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgb3IgdGhlIGRvY3VtZW50IGFscmVhZHkgbG9hZGVkXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvRE9NQ29udGVudExvYWRlZF9ldmVudCNjaGVja2luZ193aGV0aGVyX2xvYWRpbmdfaXNfYWxyZWFkeV9jb21wbGV0ZVxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgd2luZG93LkZvcm1pZS5pbml0Rm9ybXMoKTtcbiAgICB9KTtcbn0gZWxzZSB7XG4gICAgd2luZG93LkZvcm1pZS5pbml0Rm9ybXMoKTtcbn1cbiJdLCJuYW1lcyI6WyJGb3JtaWUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJpbml0Rm9ybXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/formie.js\n");

/***/ }),

/***/ "./src/js/utils/bouncer.js":
/*!*********************************!*\
  !*** ./src/js/utils/bouncer.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bouncer\": () => (/* binding */ Bouncer)\n/* harmony export */ });\n/* eslint-disable */\n\n/*!\n * formbouncerjs v1.4.6\n * A lightweight form validation script that augments native HTML5 form validation elements and attributes.\n * (c) 2020 Chris Ferdinandi\n * MIT License\n * http://github.com/cferdinandi/bouncer\n */\n\n/**\n * The plugin constructor\n * @param {DOMElement} formElement The DOM Element to use for forms to be validated\n * @param {Object} options  User settings [optional]\n */\nvar Bouncer = function Bouncer(formElement, options) {\n  //\n  // Variables\n  //\n  var defaults = {\n    // Classes & IDs\n    fieldClass: 'error',\n    errorClass: 'error-message',\n    fieldPrefix: 'bouncer-field_',\n    errorPrefix: 'bouncer-error_',\n    // Patterns\n    patterns: {\n      email: /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/,\n      url: /^(?:(?:https?|HTTPS?|ftp|FTP):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/,\n      number: /^(?:[-+]?[0-9]*[.,]?[0-9]+)$/,\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))/,\n      time: /^(?:(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]))$/,\n      month: /^(?:(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])))$/\n    },\n    // Custom Validations\n    customValidations: {},\n    // Messages\n    messageAfterField: true,\n    messageCustom: 'data-bouncer-message',\n    messageTarget: 'data-bouncer-target',\n    // messages: {\n    //     missingValue: {\n    //         checkbox: 'This field is required.',\n    //         radio: 'Please select a value.',\n    //         select: 'Please select a value.',\n    //         'select-multiple': 'Please select at least one value.',\n    //         default: 'Please fill out this field.',\n    //     },\n    //     patternMismatch: {\n    //         email: 'Please enter a valid email address.',\n    //         url: 'Please enter a URL.',\n    //         number: 'Please enter a number',\n    //         color: 'Please match the following format: #rrggbb',\n    //         date: 'Please use the YYYY-MM-DD format',\n    //         time: 'Please use the 24-hour time format. Ex. 23:00',\n    //         month: 'Please use the YYYY-MM format',\n    //         default: 'Please match the requested format.',\n    //     },\n    //     outOfRange: {\n    //         over: 'Please select a value that is no more than {max}.',\n    //         under: 'Please select a value that is no less than {min}.',\n    //     },\n    //     wrongLength: {\n    //         over: 'Please shorten this text to no more than {maxLength} characters. You are currently using {length} characters.',\n    //         under: 'Please lengthen this text to {minLength} characters or more. You are currently using {length} characters.',\n    //     },\n    //     fallback: 'There was an error with this field.',\n    // },\n    // Form Submission\n    disableSubmit: false,\n    // Allow blur/click/input events to be opt-out\n    validateOnBlur: true,\n    // Allow validation to be turned off altogether. Useful for server-side validation use.\n    validateOnSubmit: true,\n    // Custom Events\n    emitEvents: true\n  }; //\n  // Methods\n  //\n\n  /**\n   * A wrapper for Array.prototype.forEach() for non-arrays\n   * @param  {Array-like} arr      The array-like object\n   * @param  {Function}   callback The callback to run\n   */\n\n  var forEach = function forEach(arr, callback) {\n    Array.prototype.forEach.call(arr, callback);\n  };\n  /**\n   * Merge two or more objects together.\n   * @param   {Object}   objects  The objects to merge together\n   * @returns {Object}            Merged values of defaults and options\n   */\n\n\n  var extend = function extend() {\n    var merged = {};\n    forEach(arguments, function (obj) {\n      for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) return;\n\n        if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n          merged[key] = extend(merged[key], obj[key]);\n        } else {\n          merged[key] = obj[key];\n        } // merged[key] = obj[key];\n\n      }\n    });\n    return merged;\n  };\n  /**\n   * Emit a custom event\n   * @param  {String} type    The event type\n   * @param  {Object} options The settings object\n   * @param  {Node}   anchor  The anchor element\n   * @param  {Node}   toggle  The toggle element\n   */\n\n\n  var emitEvent = function emitEvent(elem, type, details) {\n    if (typeof window.CustomEvent !== 'function') return;\n    var event = new CustomEvent(type, {\n      bubbles: true,\n      detail: details || {}\n    });\n    elem.dispatchEvent(event);\n  };\n  /**\n   * Add the `novalidate` attribute to all forms\n   * @param {Boolean} remove  If true, remove the `novalidate` attribute\n   */\n\n\n  var addNoValidate = function addNoValidate(form) {\n    form.setAttribute('novalidate', true);\n  };\n  /**\n   * Remove the `novalidate` attribute to all forms\n   */\n\n\n  var removeNoValidate = function removeNoValidate(form) {\n    form.removeAttribute('novalidate');\n  };\n  /**\n   * Check if a required field is missing its value\n   * @param  {Node} field The field to check\n   * @return {Boolean}       It true, field is missing it's value\n   */\n\n\n  var missingValue = function missingValue(field) {\n    // If not required, bail\n    if (!field.hasAttribute('required')) return false; // Handle checkboxes\n\n    if (field.type === 'checkbox') {\n      // Watch out for grouped checkboxes. Only validate the group as a whole\n      var checkboxInputs = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]:not([type=\"hidden\"])');\n\n      if (checkboxInputs.length) {\n        var checkedInputs = Array.prototype.filter.call(checkboxInputs, function (btn) {\n          return btn.checked;\n        }).length;\n        return !checkedInputs;\n      }\n\n      return !field.checked;\n    } // Don't validate any hidden fields\n\n\n    if (field.type === 'hidden') {\n      return false;\n    } // Get the field value length\n\n\n    var length = field.value.length; // Handle radio buttons\n\n    if (field.type === 'radio') {\n      length = Array.prototype.filter.call(field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]'), function (btn) {\n        return btn.checked;\n      }).length;\n    } // Check for value\n\n\n    return length < 1;\n  };\n  /**\n   * Check if field value doesn't match a patter.\n   * @param  {Node}   field    The field to check\n   * @param  {Object} settings The plugin settings\n   * @see https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute\n   * @return {Boolean}         If true, there's a pattern mismatch\n   */\n\n\n  var patternMismatch = function patternMismatch(field, settings) {\n    // Check if there's a pattern to match\n    var pattern = field.getAttribute('pattern');\n    pattern = pattern ? new RegExp('^(?:' + pattern + ')$') : settings.patterns[field.type];\n    if (!pattern || !field.value || field.value.length < 1) return false; // Validate the pattern\n\n    return field.value.match(pattern) ? false : true;\n  };\n  /**\n   * Check if field value is out-of-range\n   * @param  {Node}    field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var outOfRange = function outOfRange(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for range\n\n    var max = field.getAttribute('max');\n    var min = field.getAttribute('min'); // Check validity\n\n    var num = parseFloat(field.value);\n    if (max && num > max) return 'over';\n    if (min && num < min) return 'under';\n    return false;\n  };\n  /**\n   * Check if the field value is too long or too short\n   * @param  {Node}   field    The field to check\n   * @return {String}           Returns 'over', 'under', or false\n   */\n\n\n  var wrongLength = function wrongLength(field) {\n    // Make sure field has value\n    if (!field.value || field.value.length < 1) return false; // Check for min/max length\n\n    var max = field.getAttribute('maxlength');\n    var min = field.getAttribute('minlength'); // Check validity\n\n    var length = field.value.length;\n    if (max && length > max) return 'over';\n    if (min && length < min) return 'under';\n    return false;\n  };\n  /**\n   * Test for standard field validations\n   * @param  {Node}   field    The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The tests and their results\n   */\n\n\n  var runValidations = function runValidations(field, settings) {\n    return {\n      missingValue: missingValue(field),\n      patternMismatch: patternMismatch(field, settings),\n      outOfRange: outOfRange(field),\n      wrongLength: wrongLength(field)\n    };\n  };\n  /**\n   * Run any provided custom validations\n   * @param  {Node}   field       The field to test\n   * @param  {Object} errors      The existing errors\n   * @param  {Object} validations The custom validations to run\n   * @param  {Object} settings    The plugin settings\n   * @return {Object}             The tests and their results\n   */\n\n\n  var customValidations = function customValidations(field, errors, validations, settings) {\n    for (var test in validations) {\n      if (validations.hasOwnProperty(test)) {\n        errors[test] = validations[test](field, settings);\n      }\n    }\n\n    return errors;\n  };\n  /**\n   * Check if a field has any errors\n   * @param  {Object}  errors The validation test results\n   * @return {Boolean}        Returns true if there are errors\n   */\n\n\n  var hasErrors = function hasErrors(errors) {\n    for (var type in errors) {\n      if (errors[type]) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Check a field for errors\n   * @param  {Node} field      The field to test\n   * @param  {Object} settings The plugin settings\n   * @return {Object}          The field validity and errors\n   */\n\n\n  var getErrors = function getErrors(field, settings) {\n    // Get standard validation errors\n    var errors = runValidations(field, settings); // Check for custom validations\n\n    errors = customValidations(field, errors, settings.customValidations, settings);\n    return {\n      valid: !hasErrors(errors),\n      errors: errors\n    };\n  };\n  /**\n   * Escape special characters for use with querySelector\n   * @author Mathias Bynens\n   * @link https://github.com/mathiasbynens/CSS.escape\n   * @param {String} id The anchor ID to escape\n   */\n\n\n  var escapeCharacters = function escapeCharacters(id) {\n    var string = String(id);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index); // Note: there’s no need to special-case astral symbols, surrogate\n      // pairs, or lone surrogates.\n      // If the character is NULL (U+0000), then throw an\n      // `InvalidCharacterError` exception and terminate these steps.\n\n      if (codeUnit === 0x0000) {\n        throw new InvalidCharacterError('Invalid character: the input contains U+0000.');\n      }\n\n      if ( // If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or is\n      // U+007F, […]\n      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F || // If the character is the first character and is in the range [0-9]\n      // (U+0030 to U+0039), […]\n      index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 || // If the character is the second character and is in the range [0-9]\n      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n      index === 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit === 0x002D) {\n        // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      } // If the character is not handled by one of the above rules and is\n      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n      // U+005A), or [a-z] (U+0061 to U+007A), […]\n\n\n      if (codeUnit >= 0x0080 || codeUnit === 0x002D || codeUnit === 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {\n        // the character itself\n        result += string.charAt(index);\n        continue;\n      } // Otherwise, the escaped character.\n      // http://dev.w3.org/csswg/cssom/#escape-a-character\n\n\n      result += '\\\\' + string.charAt(index);\n    } // Return sanitized hash\n\n\n    return result;\n  };\n  /**\n   * Get or create an ID for a field\n   * @param  {Node}    field    The field\n   * @param  {Object}  settings The plugin settings\n   * @param  {Boolean} create   If true, create an ID if there isn't one\n   * @return {String}           The field ID\n   */\n\n\n  var getFieldID = function getFieldID(field, settings, create) {\n    var id = field.name ? field.name : field.id;\n\n    if (!id && create) {\n      id = settings.fieldPrefix + Math.floor(Math.random() * 999);\n      field.id = id;\n    } // if (field.type === 'checkbox') {\n    //     id += '_' + (field.value || field.id);\n    // }\n\n\n    return id;\n  };\n  /**\n   * Special handling for radio buttons and checkboxes wrapped in labels.\n   * @param  {Node} field The field with the error\n   * @return {Node}       The field to show the error on\n   */\n\n\n  var getErrorField = function getErrorField(field) {\n    // If the field is a radio button, get the last item in the radio group\n    // @todo if location is before, get first item\n    if (field.type === 'radio' && field.name) {\n      var group = field.form.querySelectorAll('[name=\"' + escapeCharacters(field.name) + '\"]');\n      field = group[group.length - 1];\n    } // Get the associated label for radio button or checkbox\n    // if (field.type === 'radio') {\n    //     var label = field.closest('label') || field.form.querySelector('[for=\"' + field.id + '\"]');\n    //     field = label || field;\n    // }\n\n\n    if (field.type === 'checkbox' || field.type === 'radio') {\n      field = field.closest('[data-field-handle]').firstChild;\n    }\n\n    return field;\n  };\n  /**\n   * Get the location for a field's error message\n   * @param  {Node}   field    The field\n   * @param  {Node}   target   The target for error message\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error location\n   */\n\n\n  var getErrorLocation = function getErrorLocation(field, target, settings) {\n    // Check for a custom error message\n    var selector = field.getAttribute(settings.messageTarget);\n\n    if (selector) {\n      var location = field.form.querySelector(selector);\n\n      if (location) {\n        // @bugfix by @HaroldPutman\n        // https://github.com/cferdinandi/bouncer/pull/28\n        return location.firstChild || location.appendChild(document.createTextNode(''));\n      }\n    } // If the message should come after the field\n\n\n    if (settings.messageAfterField) {\n      if (!target) {\n        target = field;\n      } // If there's no next sibling, create one\n\n\n      if (!target.nextSibling) {\n        target.parentNode.appendChild(document.createTextNode(''));\n      }\n\n      return target.nextSibling;\n    } // If it should come before\n\n\n    return target;\n  };\n  /**\n   * Create a validation error message node\n   * @param  {Node} field      The field\n   * @param  {Object} settings The plugin settings\n   * @return {Node}            The error message node\n   */\n\n\n  var createError = function createError(field, settings) {\n    // Create the error message\n    var error = document.createElement('div');\n    error.className = settings.errorClass;\n    error.setAttribute('data-error-message', '');\n    error.id = settings.errorPrefix + getFieldID(field, settings, true); // If the field is a radio button or checkbox, grab the last field label\n\n    var fieldTarget = getErrorField(field); // Inject the error message into the DOM\n\n    var location = getErrorLocation(field, fieldTarget, settings);\n    location.parentNode.insertBefore(error, location);\n    return error;\n  };\n  /**\n   * Get the error message test\n   * @param  {Node}            field    The field to get an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   * @return {String|Function}          The error message\n   */\n\n\n  var getErrorMessage = function getErrorMessage(field, errors, settings) {\n    // Variables\n    var messages = settings.messages; // Missing value error\n\n    if (errors.missingValue) {\n      return messages.missingValue[field.type] || messages.missingValue[\"default\"];\n    } // Numbers that are out of range\n\n\n    if (errors.outOfRange) {\n      return messages.outOfRange[errors.outOfRange].replace('{max}', field.getAttribute('max')).replace('{min}', field.getAttribute('min')).replace('{length}', field.value.length);\n    } // Values that are too long or short\n\n\n    if (errors.wrongLength) {\n      return messages.wrongLength[errors.wrongLength].replace('{maxLength}', field.getAttribute('maxlength')).replace('{minLength}', field.getAttribute('minlength')).replace('{length}', field.value.length);\n    } // Pattern mismatch error\n\n\n    if (errors.patternMismatch) {\n      var custom = field.getAttribute(settings.messageCustom);\n      if (custom) return custom;\n      return messages.patternMismatch[field.type] || messages.patternMismatch[\"default\"];\n    } // Custom validations\n\n\n    for (var test in settings.customValidations) {\n      if (settings.customValidations.hasOwnProperty(test)) {\n        if (errors[test] && messages[test]) return messages[test];\n      }\n    } // Custom message, passed directly in\n\n\n    if (errors.customMessage) {\n      return errors.customMessage;\n    } // Fallback error message\n\n\n    return messages.fallback;\n  };\n  /**\n   * Add error attributes to a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var addErrorAttributes = function addErrorAttributes(field, error, settings) {\n    field.classList.add(settings.fieldClass);\n    field.setAttribute('aria-describedby', error.id);\n    field.setAttribute('aria-invalid', true);\n    var $fieldNode = field.closest('[data-field-handle]');\n\n    if ($fieldNode) {\n      $fieldNode.classList.add(settings.fieldClass);\n    }\n  };\n  /**\n   * Show error attributes on a field or radio/checkbox group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var showErrorAttributes = function showErrorAttributes(field, error, settings) {\n    // If field is a radio button, add attributes to every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        addErrorAttributes(button, error, settings);\n      });\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    addErrorAttributes(field, error, settings);\n  };\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          settings The plugin settings\n   */\n\n\n  var showError = function showError(field, errors, settings) {\n    // Get/create an error message\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings))) || createError(field, settings);\n    var msg = getErrorMessage(field, errors, settings);\n    error.textContent = typeof msg === 'function' ? msg(field, settings) : msg; // Add error attributes\n\n    showErrorAttributes(field, error, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerShowError', {\n        errors: errors\n      });\n    }\n  };\n  /**\n   * Remove error attributes from a field\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAttributes = function removeAttributes(field, settings) {\n    field.classList.remove(settings.fieldClass);\n    field.removeAttribute('aria-describedby');\n    field.removeAttribute('aria-invalid');\n    var $fieldNode = field.closest('[data-field-handle]');\n\n    if ($fieldNode) {\n      $fieldNode.classList.remove(settings.fieldClass);\n    }\n  };\n  /**\n   * Remove error attributes from the field or radio group\n   * @param  {Node}   field    The field with the error message\n   * @param  {Node}   error    The error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeErrorAttributes = function removeErrorAttributes(field, settings) {\n    // If field is a radio button, remove attributes from every button in the group\n    if (field.type === 'radio' && field.name) {\n      Array.prototype.forEach.call(document.querySelectorAll('[name=\"' + field.name + '\"]'), function (button) {\n        removeAttributes(button, settings);\n      });\n      return;\n    } // Otherwise, add an error class and aria attribute to the field\n\n\n    removeAttributes(field, settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeError = function removeError(field, settings) {\n    // Get the error message for this field\n    var error = field.form.querySelector('#' + escapeCharacters(settings.errorPrefix + getFieldID(field, settings)));\n    if (!error) return; // Remove the error\n\n    error.parentNode.removeChild(error); // Remove error and a11y from the field\n\n    removeErrorAttributes(field, settings); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(field, 'bouncerRemoveError');\n    }\n  };\n  /**\n   * Remove errors from all fields\n   * @param  {String} selector The selector for the form\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  var removeAllErrors = function removeAllErrors(form, settings) {\n    forEach(form.querySelectorAll('input, select, textarea'), function (field) {\n      removeError(field, settings);\n    });\n  }; //\n  // Variables\n  //\n\n\n  var publicAPIs = {};\n  var settings; //\n  // Methods\n  //\n\n  /**\n   * Show an error message in the DOM\n   * @param  {Node} field      The field to show an error message for\n   * @param  {Object}          errors   The errors on the field\n   * @param  {Object}          options Additional plugin settings\n   */\n\n  publicAPIs.showError = function (field, errors, options) {\n    var _settings = extend(settings, options || {});\n\n    return showError(field, errors, _settings);\n  };\n  /**\n   * Remove an error message from the DOM\n   * @param  {Node} field      The field with the error message\n   * @param  {Object} settings The plugin settings\n   */\n\n\n  publicAPIs.removeError = function (field, options) {\n    var _settings = extend(settings, options || {});\n\n    return removeError(field, _settings);\n  };\n  /**\n   * Validate a field\n   * @param  {Node} field     The field to validate\n   * @param  {Object} options Validation options\n   * @return {Object}         The validity state and errors\n   */\n\n\n  publicAPIs.validate = function (field, options) {\n    // Don't validate submits, buttons, file and reset inputs, and disabled and readonly fields\n    if (field.disabled || field.readOnly || field.type === 'reset' || field.type === 'submit' || field.type === 'button') return; // Local settings\n\n    var _settings = extend(settings, options || {}); // Check for errors\n\n\n    var isValid = getErrors(field, _settings); // If valid, remove any error messages\n\n    if (isValid.valid) {\n      removeError(field, _settings);\n      return;\n    } // Otherwise, show an error message\n\n\n    showError(field, isValid.errors, _settings);\n    return isValid;\n  };\n  /**\n   * Validate all fields in a form or section\n   * @param  {Node} target The form or section to validate fields in\n   * @return {Array}       An array of fields with errors\n   */\n\n\n  publicAPIs.validateAll = function (target) {\n    return Array.prototype.filter.call(target.querySelectorAll('input, select, textarea'), function (field) {\n      var validate = publicAPIs.validate(field);\n      return validate && !validate.valid;\n    });\n  };\n  /**\n   * Run a validation on field blur\n   */\n\n\n  var blurHandler = function blurHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Special-case for file field, blurs as soon as the selector kicks in\n\n    if (event.target.type === 'file') return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  }; // Leave this as opt-in for the moment, for better file-support\n\n\n  var changeHandler = function changeHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only handle change events for some fields\n\n    if (event.target.type !== 'file' && event.target.type !== 'checkbox' && event.target.type !== 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var inputHandler = function inputHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Run a validation on a fields with errors when the value changes\n   */\n\n\n  var clickHandler = function clickHandler(event) {\n    // Only run if the field is in a form to be validated\n    if (!event.target.form || !event.target.form.isSameNode(formElement)) return; // Only run on fields with errors\n\n    if (!event.target.classList.contains(settings.fieldClass)) return; // Don't trigger click event handling for checkbox/radio. We should use the change.\n\n    if (event.target.type === 'checkbox' || event.target.type === 'radio') return; // Validate the field\n\n    publicAPIs.validate(event.target);\n  };\n  /**\n   * Validate an entire form when it's submitted\n   */\n\n\n  var submitHandler = function submitHandler(event) {\n    // Only run on matching elements\n    if (!event.target.isSameNode(formElement)) return; // Prevent form submission\n\n    event.preventDefault(); // Validate each field\n\n    var errors = publicAPIs.validateAll(event.target); // If there are errors, focus on the first one\n\n    if (errors.length > 0) {\n      errors[0].focus();\n      emitEvent(event.target, 'bouncerFormInvalid', {\n        errors: errors\n      });\n      return;\n    } // Otherwise, submit if not disabled\n\n\n    if (!settings.disableSubmit) {\n      event.target.submit();\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(event.target, 'bouncerFormValid');\n    }\n  };\n  /**\n   * Destroy the current plugin instantiation\n   */\n\n\n  publicAPIs.destroy = function () {\n    // Remove event listeners\n    if (settings.validateOnBlur) {\n      document.removeEventListener('blur', blurHandler, true);\n      document.removeEventListener('input', inputHandler, false);\n      document.removeEventListener('change', changeHandler, false);\n      document.removeEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.removeEventListener('submit', submitHandler, false);\n    } // Remove all errors\n\n\n    removeAllErrors(formElement, settings); // Remove novalidate attribute\n\n    removeNoValidate(formElement); // Emit custom event\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerDestroyed', {\n        settings: settings\n      });\n    } // Reset settings\n\n\n    settings = null;\n  };\n  /**\n   * Instantiate a new instance of the plugin\n   */\n\n\n  var init = function init() {\n    // Create settings\n    settings = extend(defaults, options || {}); // Add novalidate attribute\n\n    addNoValidate(formElement); // Event Listeners\n\n    if (settings.validateOnBlur) {\n      document.addEventListener('blur', blurHandler, true);\n      document.addEventListener('input', inputHandler, false);\n      document.addEventListener('change', changeHandler, false);\n      document.addEventListener('click', clickHandler, false);\n    }\n\n    if (settings.validateOnSubmit) {\n      document.addEventListener('submit', submitHandler, false);\n    } // Emit custom event\n\n\n    if (settings.emitEvents) {\n      emitEvent(document, 'bouncerInitialized', {\n        settings: settings\n      });\n    }\n  }; //\n  // Inits & Event Listeners\n  //\n\n\n  init();\n  return publicAPIs;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/utils/bouncer.js\n");

/***/ }),

/***/ "./src/js/utils/polyfills.js":
/*!***********************************!*\
  !*** ./src/js/utils/polyfills.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formdata_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formdata-polyfill */ \"../../../../node_modules/formdata-polyfill/formdata.min.js\");\n//\n// Polyfills for IE11\n//\n// CustomEvent()\n(function () {\n  if (typeof window.CustomEvent === 'function') {\n    return false;\n  }\n\n  function CustomEvent(event, params) {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: null\n    };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n\n  window.CustomEvent = CustomEvent;\n})(); // FormData\n\n\n // closest\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n\n    do {\n      if (el.matches(s)) {\n        return el;\n      }\n\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvcG9seWZpbGxzLmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQSxDQUFDLFlBQVc7RUFDUixJQUFJLE9BQU9BLE1BQU0sQ0FBQ0MsV0FBZCxLQUE4QixVQUFsQyxFQUE4QztJQUFFLE9BQU8sS0FBUDtFQUFlOztFQUUvRCxTQUFTQSxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0M7SUFDaENBLE1BQU0sR0FBR0EsTUFBTSxJQUFJO01BQUVDLE9BQU8sRUFBRSxLQUFYO01BQWtCQyxVQUFVLEVBQUUsS0FBOUI7TUFBcUNDLE1BQU0sRUFBRTtJQUE3QyxDQUFuQjtJQUNBLElBQU1DLEdBQUcsR0FBR0MsUUFBUSxDQUFDQyxXQUFULENBQXFCLGFBQXJCLENBQVo7SUFDQUYsR0FBRyxDQUFDRyxlQUFKLENBQW9CUixLQUFwQixFQUEyQkMsTUFBTSxDQUFDQyxPQUFsQyxFQUEyQ0QsTUFBTSxDQUFDRSxVQUFsRCxFQUE4REYsTUFBTSxDQUFDRyxNQUFyRTtJQUNBLE9BQU9DLEdBQVA7RUFDSDs7RUFFRFAsTUFBTSxDQUFDQyxXQUFQLEdBQXFCQSxXQUFyQjtBQUNILENBWEQsS0FhQTs7O0NBR0E7O0FBQ0EsSUFBSSxDQUFDVSxPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQXZCLEVBQWdDO0VBQzVCRixPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQWxCLEdBQTRCRixPQUFPLENBQUNDLFNBQVIsQ0FBa0JFLGlCQUFsQixJQUF1Q0gsT0FBTyxDQUFDQyxTQUFSLENBQWtCRyxxQkFBckY7QUFDSDs7QUFFRCxJQUFJLENBQUNKLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksT0FBdkIsRUFBZ0M7RUFDNUJMLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksT0FBbEIsR0FBNEIsVUFBU0MsQ0FBVCxFQUFZO0lBQ3BDLElBQUlDLEVBQUUsR0FBRyxJQUFUOztJQUVBLEdBQUc7TUFDQyxJQUFJQSxFQUFFLENBQUNMLE9BQUgsQ0FBV0ksQ0FBWCxDQUFKLEVBQW1CO1FBQUUsT0FBT0MsRUFBUDtNQUFZOztNQUNqQ0EsRUFBRSxHQUFHQSxFQUFFLENBQUNDLGFBQUgsSUFBb0JELEVBQUUsQ0FBQ0UsVUFBNUI7SUFDSCxDQUhELFFBR1NGLEVBQUUsS0FBSyxJQUFQLElBQWVBLEVBQUUsQ0FBQ0csUUFBSCxLQUFnQixDQUh4Qzs7SUFJQSxPQUFPLElBQVA7RUFDSCxDQVJEO0FBU0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvcG9seWZpbGxzLmpzPzNkOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIFBvbHlmaWxscyBmb3IgSUUxMVxuLy9cblxuLy8gQ3VzdG9tRXZlbnQoKVxuKGZ1bmN0aW9uKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogbnVsbCB9O1xuICAgICAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcbn0pKCk7XG5cbi8vIEZvcm1EYXRhXG5pbXBvcnQgJ2Zvcm1kYXRhLXBvbHlmaWxsJztcblxuLy8gY2xvc2VzdFxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gICAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgbGV0IGVsID0gdGhpcztcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoZWwubWF0Y2hlcyhzKSkgeyByZXR1cm4gZWw7IH1cbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG59XG4iXSwibmFtZXMiOlsid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJldmVudCIsInBhcmFtcyIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZXZ0IiwiZG9jdW1lbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJjbG9zZXN0IiwicyIsImVsIiwicGFyZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJub2RlVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/utils/polyfills.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ensureVariable\": () => (/* binding */ ensureVariable),\n/* harmony export */   \"eventKey\": () => (/* binding */ eventKey),\n/* harmony export */   \"isEmpty\": () => (/* binding */ isEmpty),\n/* harmony export */   \"t\": () => (/* binding */ t),\n/* harmony export */   \"toBoolean\": () => (/* binding */ toBoolean)\n/* harmony export */ });\nvar isEmpty = function isEmpty(obj) {\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object;\n};\nvar toBoolean = function toBoolean(val) {\n  return !/^(?:f(?:alse)?|no?|0+)$/i.test(val) && !!val;\n};\nvar eventKey = function eventKey(eventName) {\n  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!namespace) {\n    namespace = Math.random().toString(36).substr(2, 5);\n  }\n\n  return \"\".concat(eventName, \".\").concat(namespace);\n};\nvar t = function t(string) {\n  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (window.FormieTranslations) {\n    string = window.FormieTranslations[string] || string;\n  }\n\n  return string.replace(/{([a-zA-Z0-9]+)}/g, function (match, p1) {\n    if (replacements[p1]) {\n      return replacements[p1];\n    }\n\n    return match;\n  });\n};\nvar ensureVariable = function ensureVariable(variable) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000;\n  var start = Date.now(); // Function to allow us to wait for a global variable to be available. Useful for third-party scripts.\n\n  var waitForVariable = function waitForVariable(resolve, reject) {\n    if (window[variable]) {\n      resolve(window[variable]);\n    } else if (timeout && Date.now() - start >= timeout) {\n      reject(new Error('timeout'));\n    } else {\n      setTimeout(waitForVariable.bind(this, resolve, reject), 30);\n    }\n  };\n\n  return new Promise(waitForVariable);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxJQUFNQSxPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFTQyxHQUFULEVBQWM7RUFDakMsT0FBT0EsR0FBRyxJQUFJQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsR0FBWixFQUFpQkcsTUFBakIsS0FBNEIsQ0FBbkMsSUFBd0NILEdBQUcsQ0FBQ0ksV0FBSixLQUFvQkgsTUFBbkU7QUFDSCxDQUZNO0FBSUEsSUFBTUksU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBU0MsR0FBVCxFQUFjO0VBQ25DLE9BQU8sQ0FBQywyQkFBMkJDLElBQTNCLENBQWdDRCxHQUFoQyxDQUFELElBQXlDLENBQUMsQ0FBQ0EsR0FBbEQ7QUFDSCxDQUZNO0FBSUEsSUFBTUUsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU0MsU0FBVCxFQUFzQztFQUFBLElBQWxCQyxTQUFrQix1RUFBTixJQUFNOztFQUMxRCxJQUFJLENBQUNBLFNBQUwsRUFBZ0I7SUFDWkEsU0FBUyxHQUFHQyxJQUFJLENBQUNDLE1BQUwsR0FBY0MsUUFBZCxDQUF1QixFQUF2QixFQUEyQkMsTUFBM0IsQ0FBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsQ0FBWjtFQUNIOztFQUVELGlCQUFVTCxTQUFWLGNBQXVCQyxTQUF2QjtBQUNILENBTk07QUFRQSxJQUFNSyxDQUFDLEdBQUcsU0FBSkEsQ0FBSSxDQUFTQyxNQUFULEVBQW9DO0VBQUEsSUFBbkJDLFlBQW1CLHVFQUFKLEVBQUk7O0VBQ2pELElBQUlDLE1BQU0sQ0FBQ0Msa0JBQVgsRUFBK0I7SUFDM0JILE1BQU0sR0FBR0UsTUFBTSxDQUFDQyxrQkFBUCxDQUEwQkgsTUFBMUIsS0FBcUNBLE1BQTlDO0VBQ0g7O0VBRUQsT0FBT0EsTUFBTSxDQUFDSSxPQUFQLENBQWUsbUJBQWYsRUFBb0MsVUFBQ0MsS0FBRCxFQUFRQyxFQUFSLEVBQWU7SUFDdEQsSUFBSUwsWUFBWSxDQUFDSyxFQUFELENBQWhCLEVBQXNCO01BQ2xCLE9BQU9MLFlBQVksQ0FBQ0ssRUFBRCxDQUFuQjtJQUNIOztJQUVELE9BQU9ELEtBQVA7RUFDSCxDQU5NLENBQVA7QUFPSCxDQVpNO0FBY0EsSUFBTUUsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFTQyxRQUFULEVBQXFDO0VBQUEsSUFBbEJDLE9BQWtCLHVFQUFSLE1BQVE7RUFDL0QsSUFBTUMsS0FBSyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsRUFBZCxDQUQrRCxDQUcvRDs7RUFDQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0lBQzlDLElBQUliLE1BQU0sQ0FBQ00sUUFBRCxDQUFWLEVBQXNCO01BQ2xCTSxPQUFPLENBQUNaLE1BQU0sQ0FBQ00sUUFBRCxDQUFQLENBQVA7SUFDSCxDQUZELE1BRU8sSUFBSUMsT0FBTyxJQUFLRSxJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBZCxJQUF3QkQsT0FBdkMsRUFBZ0Q7TUFDbkRNLE1BQU0sQ0FBQyxJQUFJQyxLQUFKLENBQVUsU0FBVixDQUFELENBQU47SUFDSCxDQUZNLE1BRUE7TUFDSEMsVUFBVSxDQUFDSixlQUFlLENBQUNLLElBQWhCLENBQXFCLElBQXJCLEVBQTJCSixPQUEzQixFQUFvQ0MsTUFBcEMsQ0FBRCxFQUE4QyxFQUE5QyxDQUFWO0lBQ0g7RUFDSixDQVJEOztFQVVBLE9BQU8sSUFBSUksT0FBSixDQUFZTixlQUFaLENBQVA7QUFDSCxDQWZNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3V0aWxzL3V0aWxzLmpzP2Q5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufTtcblxuZXhwb3J0IGNvbnN0IHRvQm9vbGVhbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHJldHVybiAhL14oPzpmKD86YWxzZSk/fG5vP3wwKykkL2kudGVzdCh2YWwpICYmICEhdmFsO1xufTtcblxuZXhwb3J0IGNvbnN0IGV2ZW50S2V5ID0gZnVuY3Rpb24oZXZlbnROYW1lLCBuYW1lc3BhY2UgPSBudWxsKSB7XG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgICAgbmFtZXNwYWNlID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtldmVudE5hbWV9LiR7bmFtZXNwYWNlfWA7XG59O1xuXG5leHBvcnQgY29uc3QgdCA9IGZ1bmN0aW9uKHN0cmluZywgcmVwbGFjZW1lbnRzID0ge30pIHtcbiAgICBpZiAod2luZG93LkZvcm1pZVRyYW5zbGF0aW9ucykge1xuICAgICAgICBzdHJpbmcgPSB3aW5kb3cuRm9ybWllVHJhbnNsYXRpb25zW3N0cmluZ10gfHwgc3RyaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgveyhbYS16QS1aMC05XSspfS9nLCAobWF0Y2gsIHAxKSA9PiB7XG4gICAgICAgIGlmIChyZXBsYWNlbWVudHNbcDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnRzW3AxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnN1cmVWYXJpYWJsZSA9IGZ1bmN0aW9uKHZhcmlhYmxlLCB0aW1lb3V0ID0gMTAwMDAwKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuXG4gICAgLy8gRnVuY3Rpb24gdG8gYWxsb3cgdXMgdG8gd2FpdCBmb3IgYSBnbG9iYWwgdmFyaWFibGUgdG8gYmUgYXZhaWxhYmxlLiBVc2VmdWwgZm9yIHRoaXJkLXBhcnR5IHNjcmlwdHMuXG4gICAgY29uc3Qgd2FpdEZvclZhcmlhYmxlID0gZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGlmICh3aW5kb3dbdmFyaWFibGVdKSB7XG4gICAgICAgICAgICByZXNvbHZlKHdpbmRvd1t2YXJpYWJsZV0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRpbWVvdXQgJiYgKERhdGUubm93KCkgLSBzdGFydCkgPj0gdGltZW91dCkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigndGltZW91dCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQod2FpdEZvclZhcmlhYmxlLmJpbmQodGhpcywgcmVzb2x2ZSwgcmVqZWN0KSwgMzApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSh3YWl0Rm9yVmFyaWFibGUpO1xufTtcbiJdLCJuYW1lcyI6WyJpc0VtcHR5Iiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImNvbnN0cnVjdG9yIiwidG9Cb29sZWFuIiwidmFsIiwidGVzdCIsImV2ZW50S2V5IiwiZXZlbnROYW1lIiwibmFtZXNwYWNlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwidCIsInN0cmluZyIsInJlcGxhY2VtZW50cyIsIndpbmRvdyIsIkZvcm1pZVRyYW5zbGF0aW9ucyIsInJlcGxhY2UiLCJtYXRjaCIsInAxIiwiZW5zdXJlVmFyaWFibGUiLCJ2YXJpYWJsZSIsInRpbWVvdXQiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJ3YWl0Rm9yVmFyaWFibGUiLCJyZXNvbHZlIiwicmVqZWN0IiwiRXJyb3IiLCJzZXRUaW1lb3V0IiwiYmluZCIsIlByb21pc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ }),

/***/ "./src/scss/formie-base.scss":
/*!***********************************!*\
  !*** ./src/scss/formie-base.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtYmFzZS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2Zvcm1pZS1iYXNlLnNjc3M/ZDAzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/formie-base.scss\n");

/***/ }),

/***/ "./src/scss/formie-theme.scss":
/*!************************************!*\
  !*** ./src/scss/formie-theme.scss ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9mb3JtaWUtdGhlbWUuc2Nzcz82NjZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scss/formie-theme.scss\n");

/***/ }),

/***/ "./src/scss/fields/phone-country.scss":
/*!********************************************!*\
  !*** ./src/scss/fields/phone-country.scss ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvcGhvbmUtY291bnRyeS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy9waG9uZS1jb3VudHJ5LnNjc3M/NTAyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/phone-country.scss\n");

/***/ }),

/***/ "./src/scss/fields/tags.scss":
/*!***********************************!*\
  !*** ./src/scss/fields/tags.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9maWVsZHMvdGFncy5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL2ZpZWxkcy90YWdzLnNjc3M/ZWE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/fields/tags.scss\n");

/***/ }),

/***/ "../../../../node_modules/formdata-polyfill/formdata.min.js":
/*!******************************************************************!*\
  !*** ../../../../node_modules/formdata-polyfill/formdata.min.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> */\n;(function(){var h;function l(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}var m=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction n(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var q=n(this);function r(a,b){if(b)a:{var c=q;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&m(c,a,{configurable:!0,writable:!0,value:b})}}\nr(\"Symbol\",function(a){function b(f){if(this instanceof b)throw new TypeError(\"Symbol is not a constructor\");return new c(d+(f||\"\")+\"_\"+e++,f)}function c(f,g){this.A=f;m(this,\"description\",{configurable:!0,writable:!0,value:g})}if(a)return a;c.prototype.toString=function(){return this.A};var d=\"jscomp_symbol_\"+(1E9*Math.random()>>>0)+\"_\",e=0;return b});\nr(\"Symbol.iterator\",function(a){if(a)return a;a=Symbol(\"Symbol.iterator\");for(var b=\"Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array\".split(\" \"),c=0;c<b.length;c++){var d=q[b[c]];\"function\"===typeof d&&\"function\"!=typeof d.prototype[a]&&m(d.prototype,a,{configurable:!0,writable:!0,value:function(){return u(l(this))}})}return a});function u(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}\nfunction v(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:l(a)}}var w;if(\"function\"==typeof Object.setPrototypeOf)w=Object.setPrototypeOf;else{var y;a:{var z={a:!0},A={};try{A.__proto__=z;y=A.a;break a}catch(a){}y=!1}w=y?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+\" is not extensible\");return a}:null}var B=w;function C(){this.m=!1;this.j=null;this.v=void 0;this.h=1;this.u=this.C=0;this.l=null}\nfunction D(a){if(a.m)throw new TypeError(\"Generator is already running\");a.m=!0}C.prototype.o=function(a){this.v=a};C.prototype.s=function(a){this.l={D:a,F:!0};this.h=this.C||this.u};C.prototype.return=function(a){this.l={return:a};this.h=this.u};function E(a,b){a.h=3;return{value:b}}function F(a){this.g=new C;this.G=a}F.prototype.o=function(a){D(this.g);if(this.g.j)return G(this,this.g.j.next,a,this.g.o);this.g.o(a);return H(this)};\nfunction I(a,b){D(a.g);var c=a.g.j;if(c)return G(a,\"return\"in c?c[\"return\"]:function(d){return{value:d,done:!0}},b,a.g.return);a.g.return(b);return H(a)}F.prototype.s=function(a){D(this.g);if(this.g.j)return G(this,this.g.j[\"throw\"],a,this.g.o);this.g.s(a);return H(this)};\nfunction G(a,b,c,d){try{var e=b.call(a.g.j,c);if(!(e instanceof Object))throw new TypeError(\"Iterator result \"+e+\" is not an object\");if(!e.done)return a.g.m=!1,e;var f=e.value}catch(g){return a.g.j=null,a.g.s(g),H(a)}a.g.j=null;d.call(a.g,f);return H(a)}function H(a){for(;a.g.h;)try{var b=a.G(a.g);if(b)return a.g.m=!1,{value:b.value,done:!1}}catch(c){a.g.v=void 0,a.g.s(c)}a.g.m=!1;if(a.g.l){b=a.g.l;a.g.l=null;if(b.F)throw b.D;return{value:b.return,done:!0}}return{value:void 0,done:!0}}\nfunction J(a){this.next=function(b){return a.o(b)};this.throw=function(b){return a.s(b)};this.return=function(b){return I(a,b)};this[Symbol.iterator]=function(){return this}}function K(a,b){b=new J(new F(b));B&&a.prototype&&B(b,a.prototype);return b}function L(a,b){a instanceof String&&(a+=\"\");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d=!0;return{done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}\nr(\"Array.prototype.entries\",function(a){return a?a:function(){return L(this,function(b,c){return[b,c]})}});\nif(\"undefined\"!==typeof Blob&&(\"undefined\"===typeof FormData||!FormData.prototype.keys)){var M=function(a,b){for(var c=0;c<a.length;c++)b(a[c])},N=function(a){return a.replace(/\\r?\\n|\\r/g,\"\\r\\n\")},O=function(a,b,c){if(b instanceof Blob){c=void 0!==c?String(c+\"\"):\"string\"===typeof b.name?b.name:\"blob\";if(b.name!==c||\"[object Blob]\"===Object.prototype.toString.call(b))b=new File([b],c);return[String(a),b]}return[String(a),String(b)]},P=function(a,b){if(a.length<b)throw new TypeError(b+\" argument required, but only \"+\na.length+\" present.\");},Q=\"object\"===typeof globalThis?globalThis:\"object\"===typeof window?window:\"object\"===typeof self?self:this,R=Q.FormData,S=Q.XMLHttpRequest&&Q.XMLHttpRequest.prototype.send,T=Q.Request&&Q.fetch,U=Q.navigator&&Q.navigator.sendBeacon,V=Q.Element&&Q.Element.prototype,W=Q.Symbol&&Symbol.toStringTag;W&&(Blob.prototype[W]||(Blob.prototype[W]=\"Blob\"),\"File\"in Q&&!File.prototype[W]&&(File.prototype[W]=\"File\"));try{new File([],\"\")}catch(a){Q.File=function(b,c,d){b=new Blob(b,d||{});\nObject.defineProperties(b,{name:{value:c},lastModified:{value:+(d&&void 0!==d.lastModified?new Date(d.lastModified):new Date)},toString:{value:function(){return\"[object File]\"}}});W&&Object.defineProperty(b,W,{value:\"File\"});return b}}var escape=function(a){return a.replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\")},X=function(a){this.i=[];var b=this;a&&M(a.elements,function(c){if(c.name&&!c.disabled&&\"submit\"!==c.type&&\"button\"!==c.type&&!c.matches(\"form fieldset[disabled] *\"))if(\"file\"===\nc.type){var d=c.files&&c.files.length?c.files:[new File([],\"\",{type:\"application/octet-stream\"})];M(d,function(e){b.append(c.name,e)})}else\"select-multiple\"===c.type||\"select-one\"===c.type?M(c.options,function(e){!e.disabled&&e.selected&&b.append(c.name,e.value)}):\"checkbox\"===c.type||\"radio\"===c.type?c.checked&&b.append(c.name,c.value):(d=\"textarea\"===c.type?N(c.value):c.value,b.append(c.name,d))})};h=X.prototype;h.append=function(a,b,c){P(arguments,2);this.i.push(O(a,b,c))};h.delete=function(a){P(arguments,\n1);var b=[];a=String(a);M(this.i,function(c){c[0]!==a&&b.push(c)});this.i=b};h.entries=function b(){var c,d=this;return K(b,function(e){1==e.h&&(c=0);if(3!=e.h)return c<d.i.length?e=E(e,d.i[c]):(e.h=0,e=void 0),e;c++;e.h=2})};h.forEach=function(b,c){P(arguments,1);for(var d=v(this),e=d.next();!e.done;e=d.next()){var f=v(e.value);e=f.next().value;f=f.next().value;b.call(c,f,e,this)}};h.get=function(b){P(arguments,1);var c=this.i;b=String(b);for(var d=0;d<c.length;d++)if(c[d][0]===b)return c[d][1];\nreturn null};h.getAll=function(b){P(arguments,1);var c=[];b=String(b);M(this.i,function(d){d[0]===b&&c.push(d[1])});return c};h.has=function(b){P(arguments,1);b=String(b);for(var c=0;c<this.i.length;c++)if(this.i[c][0]===b)return!0;return!1};h.keys=function c(){var d=this,e,f,g,k,p;return K(c,function(t){1==t.h&&(e=v(d),f=e.next());if(3!=t.h){if(f.done){t.h=0;return}g=f.value;k=v(g);p=k.next().value;return E(t,p)}f=e.next();t.h=2})};h.set=function(c,d,e){P(arguments,2);c=String(c);var f=[],g=O(c,\nd,e),k=!0;M(this.i,function(p){p[0]===c?k&&(k=!f.push(g)):f.push(p)});k&&f.push(g);this.i=f};h.values=function d(){var e=this,f,g,k,p,t;return K(d,function(x){1==x.h&&(f=v(e),g=f.next());if(3!=x.h){if(g.done){x.h=0;return}k=g.value;p=v(k);p.next();t=p.next().value;return E(x,t)}g=f.next();x.h=2})};X.prototype._asNative=function(){for(var d=new R,e=v(this),f=e.next();!f.done;f=e.next()){var g=v(f.value);f=g.next().value;g=g.next().value;d.append(f,g)}return d};X.prototype._blob=function(){var d=\"----formdata-polyfill-\"+\nMath.random(),e=[],f=\"--\"+d+'\\r\\nContent-Disposition: form-data; name=\"';this.forEach(function(g,k){return\"string\"==typeof g?e.push(f+escape(N(k))+('\"\\r\\n\\r\\n'+N(g)+\"\\r\\n\")):e.push(f+escape(N(k))+('\"; filename=\"'+escape(g.name)+'\"\\r\\nContent-Type: '+(g.type||\"application/octet-stream\")+\"\\r\\n\\r\\n\"),g,\"\\r\\n\")});e.push(\"--\"+d+\"--\");return new Blob(e,{type:\"multipart/form-data; boundary=\"+d})};X.prototype[Symbol.iterator]=function(){return this.entries()};X.prototype.toString=function(){return\"[object FormData]\"};\nV&&!V.matches&&(V.matches=V.matchesSelector||V.mozMatchesSelector||V.msMatchesSelector||V.oMatchesSelector||V.webkitMatchesSelector||function(d){d=(this.document||this.ownerDocument).querySelectorAll(d);for(var e=d.length;0<=--e&&d.item(e)!==this;);return-1<e});W&&(X.prototype[W]=\"FormData\");if(S){var Y=Q.XMLHttpRequest.prototype.setRequestHeader;Q.XMLHttpRequest.prototype.setRequestHeader=function(d,e){Y.call(this,d,e);\"content-type\"===d.toLowerCase()&&(this.B=!0)};Q.XMLHttpRequest.prototype.send=\nfunction(d){d instanceof X?(d=d._blob(),this.B||this.setRequestHeader(\"Content-Type\",d.type),S.call(this,d)):S.call(this,d)}}T&&(Q.fetch=function(d,e){e&&e.body&&e.body instanceof X&&(e.body=e.body._blob());return T.call(this,d,e)});U&&(Q.navigator.sendBeacon=function(d,e){e instanceof X&&(e=e._asNative());return U.call(this,d,e)});Q.FormData=X};})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zvcm1kYXRhLXBvbHlmaWxsL2Zvcm1kYXRhLm1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQSxDQUFDLFlBQVksTUFBTSxjQUFjLFFBQVEsa0JBQWtCLG1CQUFtQixxQkFBcUIsRUFBRSxVQUFVLHVGQUF1RixvREFBb0QsYUFBYTtBQUN2USxjQUFjLDBJQUEwSSxZQUFZLFdBQVcsS0FBSyxXQUFXLDRCQUE0QiwwQ0FBMEMsY0FBYyxnQkFBZ0IsUUFBUSxRQUFRLGVBQWUsWUFBWSxhQUFhLEtBQUssV0FBVyxxQkFBcUIsT0FBTyxnQkFBZ0IsT0FBTyxPQUFPLHNCQUFzQixvQ0FBb0M7QUFDL2QsdUJBQXVCLGNBQWMsd0VBQXdFLGtDQUFrQyxnQkFBZ0IsU0FBUyxzQkFBc0Isb0NBQW9DLEVBQUUsY0FBYyxnQ0FBZ0MsZUFBZSx1REFBdUQsU0FBUztBQUNqVyxnQ0FBZ0MsY0FBYyw0QkFBNEIsZ0pBQWdKLFdBQVcsS0FBSyxjQUFjLDJFQUEyRSw2Q0FBNkMsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLGNBQWMsR0FBRyxRQUFRLDhCQUE4QixhQUFhO0FBQ3BkLGNBQWMsc0VBQXNFLG9CQUFvQixXQUFXLE1BQU0sb0VBQW9FLEtBQUssTUFBTSxHQUFHLE9BQU8sS0FBSyxNQUFNLElBQUksY0FBYyxNQUFNLFFBQVEsVUFBVSxLQUFLLGtCQUFrQixjQUFjLCtEQUErRCxTQUFTLE1BQU0sUUFBUSxhQUFhLFVBQVUsWUFBWSxjQUFjLFNBQVMsZ0JBQWdCO0FBQzVjLGNBQWMsMkRBQTJELE9BQU8sMEJBQTBCLFVBQVUsMEJBQTBCLFFBQVEsVUFBVSx1QkFBdUIsK0JBQStCLFFBQVEsVUFBVSxlQUFlLGdCQUFnQixNQUFNLE9BQU8sU0FBUyxjQUFjLGFBQWEsU0FBUywwQkFBMEIsVUFBVSxvREFBb0QsWUFBWTtBQUNyYSxnQkFBZ0IsT0FBTyxZQUFZLHFEQUFxRCxPQUFPLGlCQUFpQixlQUFlLGNBQWMsWUFBWSwwQkFBMEIsVUFBVSx3REFBd0QsWUFBWTtBQUNqUSxvQkFBb0IsSUFBSSxzQkFBc0Isd0ZBQXdGLDZCQUE2QixjQUFjLFNBQVMsZ0NBQWdDLFdBQVcsY0FBYyxZQUFZLGNBQWMsS0FBSyxNQUFNLEtBQUssZUFBZSxzQkFBc0IsdUJBQXVCLFNBQVMsc0JBQXNCLFNBQVMsVUFBVSxRQUFRLFdBQVcsaUJBQWlCLE9BQU8sd0JBQXdCLE9BQU87QUFDcmQsY0FBYyxzQkFBc0IsZUFBZSx1QkFBdUIsZUFBZSx3QkFBd0IsZUFBZSxpQ0FBaUMsYUFBYSxnQkFBZ0Isa0JBQWtCLGlDQUFpQyxTQUFTLGdCQUFnQiw2QkFBNkIsZ0JBQWdCLGdCQUFnQixtQkFBbUIsVUFBVSxPQUFPLHlCQUF5QixLQUFLLE9BQU8sd0JBQXdCLDhCQUE4QixVQUFVO0FBQ2hkLHdDQUF3QyxzQkFBc0IsNEJBQTRCLFlBQVksR0FBRztBQUN6Ryx5RkFBeUYsb0JBQW9CLFlBQVksV0FBVyxZQUFZLGVBQWUscUNBQXFDLG1CQUFtQixzQkFBc0IsaUVBQWlFLHFGQUFxRixvQkFBb0IsNEJBQTRCLGlCQUFpQjtBQUNwYyx1QkFBdUIsd1NBQXdTLDhHQUE4RyxJQUFJLGdCQUFnQixTQUFTLHVCQUF1QixrQkFBa0I7QUFDbmYsMkJBQTJCLE1BQU0sUUFBUSxlQUFlLHNFQUFzRSxXQUFXLGlCQUFpQix3QkFBd0IsRUFBRSw4QkFBOEIsYUFBYSxFQUFFLFVBQVUsdUJBQXVCLHVFQUF1RSxlQUFlLFVBQVUsV0FBVyw0QkFBNEI7QUFDelksUUFBUSx1REFBdUQsZ0NBQWdDLEdBQUcsZ0JBQWdCLG1CQUFtQixFQUFFLDhFQUE4RSxrREFBa0QsMElBQTBJLEdBQUcsY0FBYyx5QkFBeUIsZUFBZSx1QkFBdUIscUJBQXFCO0FBQ3RmLEdBQUcsU0FBUyxZQUFZLHFCQUFxQixvQkFBb0IsRUFBRSxVQUFVLHVCQUF1QixhQUFhLHVCQUF1QixjQUFjLCtEQUErRCxJQUFJLE1BQU0sR0FBRyx3QkFBd0IsZUFBZSw2QkFBNkIsUUFBUSxZQUFZLGlCQUFpQixpQkFBaUIsaUJBQWlCLHFCQUFxQixrQkFBa0IsZUFBZSxhQUFhLFlBQVksWUFBWSxXQUFXO0FBQ25kLGFBQWEscUJBQXFCLGVBQWUsU0FBUyxZQUFZLHFCQUFxQix1QkFBdUIsRUFBRSxVQUFVLGtCQUFrQixlQUFlLFlBQVksWUFBWSxnQkFBZ0IsaUNBQWlDLFVBQVUsb0JBQW9CLHFCQUFxQix1QkFBdUIsNEJBQTRCLFdBQVcsV0FBVyxNQUFNLE9BQU8sVUFBVSxPQUFPLGlCQUFpQixjQUFjLFdBQVcsTUFBTSxHQUFHLHNCQUFzQixlQUFlLFlBQVk7QUFDdGUsVUFBVSxxQkFBcUIscUNBQXFDLEVBQUUsYUFBYSxVQUFVLHNCQUFzQixxQkFBcUIsdUJBQXVCLDRCQUE0QixXQUFXLFdBQVcsTUFBTSxPQUFPLFVBQVUsT0FBTyxTQUFTLGlCQUFpQixjQUFjLFdBQVcsTUFBTSxHQUFHLGlDQUFpQyxxQ0FBcUMsUUFBUSxZQUFZLGlCQUFpQixpQkFBaUIsaUJBQWlCLGNBQWMsVUFBVSw2QkFBNkI7QUFDN2UsaUVBQWlFLFFBQVEsMkJBQTJCLHFHQUFxRyw0R0FBNEcsRUFBRSxvQkFBb0IsbUJBQW1CLDJCQUEyQixhQUFhLEdBQUcsd0NBQXdDLHVCQUF1QixnQ0FBZ0M7QUFDeGUsaUpBQWlKLDBEQUEwRCxtQkFBbUIseUJBQXlCLEVBQUUsV0FBVyxFQUFFLCtCQUErQixNQUFNLGtEQUFrRCwwREFBMEQsaUJBQWlCLCtDQUErQztBQUN2ZCxZQUFZLGlIQUFpSCwwQkFBMEIsd0RBQXdELHdCQUF3QixFQUFFLHlDQUF5QyxrQ0FBa0Msd0JBQXdCLEVBQUUsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZm9ybWRhdGEtcG9seWZpbGwvZm9ybWRhdGEubWluLmpzPzJlNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGZvcm1kYXRhLXBvbHlmaWxsLiBNSVQgTGljZW5zZS4gSmltbXkgVz9ydGluZyA8aHR0cHM6Ly9qaW1teS53YXJ0aW5nLnNlL29wZW5zb3VyY2U+ICovXG47KGZ1bmN0aW9uKCl7dmFyIGg7ZnVuY3Rpb24gbChhKXt2YXIgYj0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiPGEubGVuZ3RoP3tkb25lOiExLHZhbHVlOmFbYisrXX06e2RvbmU6ITB9fX12YXIgbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydGllcz9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oYSxiLGMpe2lmKGE9PUFycmF5LnByb3RvdHlwZXx8YT09T2JqZWN0LnByb3RvdHlwZSlyZXR1cm4gYTthW2JdPWMudmFsdWU7cmV0dXJuIGF9O1xuZnVuY3Rpb24gbihhKXthPVtcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsVGhpcyYmZ2xvYmFsVGhpcyxhLFwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyxcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZixcIm9iamVjdFwiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWxdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KytiKXt2YXIgYz1hW2JdO2lmKGMmJmMuTWF0aD09TWF0aClyZXR1cm4gY310aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIGdsb2JhbCBvYmplY3RcIik7fXZhciBxPW4odGhpcyk7ZnVuY3Rpb24gcihhLGIpe2lmKGIpYTp7dmFyIGM9cTthPWEuc3BsaXQoXCIuXCIpO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGgtMTtkKyspe3ZhciBlPWFbZF07aWYoIShlIGluIGMpKWJyZWFrIGE7Yz1jW2VdfWE9YVthLmxlbmd0aC0xXTtkPWNbYV07Yj1iKGQpO2IhPWQmJm51bGwhPWImJm0oYyxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX1cbnIoXCJTeW1ib2xcIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGYpe2lmKHRoaXMgaW5zdGFuY2VvZiBiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3JcIik7cmV0dXJuIG5ldyBjKGQrKGZ8fFwiXCIpK1wiX1wiK2UrKyxmKX1mdW5jdGlvbiBjKGYsZyl7dGhpcy5BPWY7bSh0aGlzLFwiZGVzY3JpcHRpb25cIix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmd9KX1pZihhKXJldHVybiBhO2MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuQX07dmFyIGQ9XCJqc2NvbXBfc3ltYm9sX1wiKygxRTkqTWF0aC5yYW5kb20oKT4+PjApK1wiX1wiLGU9MDtyZXR1cm4gYn0pO1xucihcIlN5bWJvbC5pdGVyYXRvclwiLGZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIGE7YT1TeW1ib2woXCJTeW1ib2wuaXRlcmF0b3JcIik7Zm9yKHZhciBiPVwiQXJyYXkgSW50OEFycmF5IFVpbnQ4QXJyYXkgVWludDhDbGFtcGVkQXJyYXkgSW50MTZBcnJheSBVaW50MTZBcnJheSBJbnQzMkFycmF5IFVpbnQzMkFycmF5IEZsb2F0MzJBcnJheSBGbG9hdDY0QXJyYXlcIi5zcGxpdChcIiBcIiksYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1xW2JbY11dO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBkLnByb3RvdHlwZVthXSYmbShkLnByb3RvdHlwZSxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdShsKHRoaXMpKX19KX1yZXR1cm4gYX0pO2Z1bmN0aW9uIHUoYSl7YT17bmV4dDphfTthW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307cmV0dXJuIGF9XG5mdW5jdGlvbiB2KGEpe3ZhciBiPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvciYmYVtTeW1ib2wuaXRlcmF0b3JdO3JldHVybiBiP2IuY2FsbChhKTp7bmV4dDpsKGEpfX12YXIgdztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2Ypdz1PYmplY3Quc2V0UHJvdG90eXBlT2Y7ZWxzZXt2YXIgeTthOnt2YXIgej17YTohMH0sQT17fTt0cnl7QS5fX3Byb3RvX189ejt5PUEuYTticmVhayBhfWNhdGNoKGEpe315PSExfXc9eT9mdW5jdGlvbihhLGIpe2EuX19wcm90b19fPWI7aWYoYS5fX3Byb3RvX18hPT1iKXRocm93IG5ldyBUeXBlRXJyb3IoYStcIiBpcyBub3QgZXh0ZW5zaWJsZVwiKTtyZXR1cm4gYX06bnVsbH12YXIgQj13O2Z1bmN0aW9uIEMoKXt0aGlzLm09ITE7dGhpcy5qPW51bGw7dGhpcy52PXZvaWQgMDt0aGlzLmg9MTt0aGlzLnU9dGhpcy5DPTA7dGhpcy5sPW51bGx9XG5mdW5jdGlvbiBEKGEpe2lmKGEubSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTthLm09ITB9Qy5wcm90b3R5cGUubz1mdW5jdGlvbihhKXt0aGlzLnY9YX07Qy5wcm90b3R5cGUucz1mdW5jdGlvbihhKXt0aGlzLmw9e0Q6YSxGOiEwfTt0aGlzLmg9dGhpcy5DfHx0aGlzLnV9O0MucHJvdG90eXBlLnJldHVybj1mdW5jdGlvbihhKXt0aGlzLmw9e3JldHVybjphfTt0aGlzLmg9dGhpcy51fTtmdW5jdGlvbiBFKGEsYil7YS5oPTM7cmV0dXJue3ZhbHVlOmJ9fWZ1bmN0aW9uIEYoYSl7dGhpcy5nPW5ldyBDO3RoaXMuRz1hfUYucHJvdG90eXBlLm89ZnVuY3Rpb24oYSl7RCh0aGlzLmcpO2lmKHRoaXMuZy5qKXJldHVybiBHKHRoaXMsdGhpcy5nLmoubmV4dCxhLHRoaXMuZy5vKTt0aGlzLmcubyhhKTtyZXR1cm4gSCh0aGlzKX07XG5mdW5jdGlvbiBJKGEsYil7RChhLmcpO3ZhciBjPWEuZy5qO2lmKGMpcmV0dXJuIEcoYSxcInJldHVyblwiaW4gYz9jW1wicmV0dXJuXCJdOmZ1bmN0aW9uKGQpe3JldHVybnt2YWx1ZTpkLGRvbmU6ITB9fSxiLGEuZy5yZXR1cm4pO2EuZy5yZXR1cm4oYik7cmV0dXJuIEgoYSl9Ri5wcm90b3R5cGUucz1mdW5jdGlvbihhKXtEKHRoaXMuZyk7aWYodGhpcy5nLmopcmV0dXJuIEcodGhpcyx0aGlzLmcualtcInRocm93XCJdLGEsdGhpcy5nLm8pO3RoaXMuZy5zKGEpO3JldHVybiBIKHRoaXMpfTtcbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dHJ5e3ZhciBlPWIuY2FsbChhLmcuaixjKTtpZighKGUgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJJdGVyYXRvciByZXN1bHQgXCIrZStcIiBpcyBub3QgYW4gb2JqZWN0XCIpO2lmKCFlLmRvbmUpcmV0dXJuIGEuZy5tPSExLGU7dmFyIGY9ZS52YWx1ZX1jYXRjaChnKXtyZXR1cm4gYS5nLmo9bnVsbCxhLmcucyhnKSxIKGEpfWEuZy5qPW51bGw7ZC5jYWxsKGEuZyxmKTtyZXR1cm4gSChhKX1mdW5jdGlvbiBIKGEpe2Zvcig7YS5nLmg7KXRyeXt2YXIgYj1hLkcoYS5nKTtpZihiKXJldHVybiBhLmcubT0hMSx7dmFsdWU6Yi52YWx1ZSxkb25lOiExfX1jYXRjaChjKXthLmcudj12b2lkIDAsYS5nLnMoYyl9YS5nLm09ITE7aWYoYS5nLmwpe2I9YS5nLmw7YS5nLmw9bnVsbDtpZihiLkYpdGhyb3cgYi5EO3JldHVybnt2YWx1ZTpiLnJldHVybixkb25lOiEwfX1yZXR1cm57dmFsdWU6dm9pZCAwLGRvbmU6ITB9fVxuZnVuY3Rpb24gSihhKXt0aGlzLm5leHQ9ZnVuY3Rpb24oYil7cmV0dXJuIGEubyhiKX07dGhpcy50aHJvdz1mdW5jdGlvbihiKXtyZXR1cm4gYS5zKGIpfTt0aGlzLnJldHVybj1mdW5jdGlvbihiKXtyZXR1cm4gSShhLGIpfTt0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319ZnVuY3Rpb24gSyhhLGIpe2I9bmV3IEoobmV3IEYoYikpO0ImJmEucHJvdG90eXBlJiZCKGIsYS5wcm90b3R5cGUpO3JldHVybiBifWZ1bmN0aW9uIEwoYSxiKXthIGluc3RhbmNlb2YgU3RyaW5nJiYoYSs9XCJcIik7dmFyIGM9MCxkPSExLGU9e25leHQ6ZnVuY3Rpb24oKXtpZighZCYmYzxhLmxlbmd0aCl7dmFyIGY9YysrO3JldHVybnt2YWx1ZTpiKGYsYVtmXSksZG9uZTohMX19ZD0hMDtyZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fX07ZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBlfVxucihcIkFycmF5LnByb3RvdHlwZS5lbnRyaWVzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbigpe3JldHVybiBMKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm5bYixjXX0pfX0pO1xuaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBCbG9iJiYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBGb3JtRGF0YXx8IUZvcm1EYXRhLnByb3RvdHlwZS5rZXlzKSl7dmFyIE09ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliKGFbY10pfSxOPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xccj9cXG58XFxyL2csXCJcXHJcXG5cIil9LE89ZnVuY3Rpb24oYSxiLGMpe2lmKGIgaW5zdGFuY2VvZiBCbG9iKXtjPXZvaWQgMCE9PWM/U3RyaW5nKGMrXCJcIik6XCJzdHJpbmdcIj09PXR5cGVvZiBiLm5hbWU/Yi5uYW1lOlwiYmxvYlwiO2lmKGIubmFtZSE9PWN8fFwiW29iamVjdCBCbG9iXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpKWI9bmV3IEZpbGUoW2JdLGMpO3JldHVybltTdHJpbmcoYSksYl19cmV0dXJuW1N0cmluZyhhKSxTdHJpbmcoYildfSxQPWZ1bmN0aW9uKGEsYil7aWYoYS5sZW5ndGg8Yil0aHJvdyBuZXcgVHlwZUVycm9yKGIrXCIgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IFwiK1xuYS5sZW5ndGgrXCIgcHJlc2VudC5cIik7fSxRPVwib2JqZWN0XCI9PT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwib2JqZWN0XCI9PT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLFI9US5Gb3JtRGF0YSxTPVEuWE1MSHR0cFJlcXVlc3QmJlEuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQsVD1RLlJlcXVlc3QmJlEuZmV0Y2gsVT1RLm5hdmlnYXRvciYmUS5uYXZpZ2F0b3Iuc2VuZEJlYWNvbixWPVEuRWxlbWVudCYmUS5FbGVtZW50LnByb3RvdHlwZSxXPVEuU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWc7VyYmKEJsb2IucHJvdG90eXBlW1ddfHwoQmxvYi5wcm90b3R5cGVbV109XCJCbG9iXCIpLFwiRmlsZVwiaW4gUSYmIUZpbGUucHJvdG90eXBlW1ddJiYoRmlsZS5wcm90b3R5cGVbV109XCJGaWxlXCIpKTt0cnl7bmV3IEZpbGUoW10sXCJcIil9Y2F0Y2goYSl7US5GaWxlPWZ1bmN0aW9uKGIsYyxkKXtiPW5ldyBCbG9iKGIsZHx8e30pO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYix7bmFtZTp7dmFsdWU6Y30sbGFzdE1vZGlmaWVkOnt2YWx1ZTorKGQmJnZvaWQgMCE9PWQubGFzdE1vZGlmaWVkP25ldyBEYXRlKGQubGFzdE1vZGlmaWVkKTpuZXcgRGF0ZSl9LHRvU3RyaW5nOnt2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBGaWxlXVwifX19KTtXJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoYixXLHt2YWx1ZTpcIkZpbGVcIn0pO3JldHVybiBifX12YXIgZXNjYXBlPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL1xcbi9nLFwiJTBBXCIpLnJlcGxhY2UoL1xcci9nLFwiJTBEXCIpLnJlcGxhY2UoL1wiL2csXCIlMjJcIil9LFg9ZnVuY3Rpb24oYSl7dGhpcy5pPVtdO3ZhciBiPXRoaXM7YSYmTShhLmVsZW1lbnRzLGZ1bmN0aW9uKGMpe2lmKGMubmFtZSYmIWMuZGlzYWJsZWQmJlwic3VibWl0XCIhPT1jLnR5cGUmJlwiYnV0dG9uXCIhPT1jLnR5cGUmJiFjLm1hdGNoZXMoXCJmb3JtIGZpZWxkc2V0W2Rpc2FibGVkXSAqXCIpKWlmKFwiZmlsZVwiPT09XG5jLnR5cGUpe3ZhciBkPWMuZmlsZXMmJmMuZmlsZXMubGVuZ3RoP2MuZmlsZXM6W25ldyBGaWxlKFtdLFwiXCIse3R5cGU6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIn0pXTtNKGQsZnVuY3Rpb24oZSl7Yi5hcHBlbmQoYy5uYW1lLGUpfSl9ZWxzZVwic2VsZWN0LW11bHRpcGxlXCI9PT1jLnR5cGV8fFwic2VsZWN0LW9uZVwiPT09Yy50eXBlP00oYy5vcHRpb25zLGZ1bmN0aW9uKGUpeyFlLmRpc2FibGVkJiZlLnNlbGVjdGVkJiZiLmFwcGVuZChjLm5hbWUsZS52YWx1ZSl9KTpcImNoZWNrYm94XCI9PT1jLnR5cGV8fFwicmFkaW9cIj09PWMudHlwZT9jLmNoZWNrZWQmJmIuYXBwZW5kKGMubmFtZSxjLnZhbHVlKTooZD1cInRleHRhcmVhXCI9PT1jLnR5cGU/TihjLnZhbHVlKTpjLnZhbHVlLGIuYXBwZW5kKGMubmFtZSxkKSl9KX07aD1YLnByb3RvdHlwZTtoLmFwcGVuZD1mdW5jdGlvbihhLGIsYyl7UChhcmd1bWVudHMsMik7dGhpcy5pLnB1c2goTyhhLGIsYykpfTtoLmRlbGV0ZT1mdW5jdGlvbihhKXtQKGFyZ3VtZW50cyxcbjEpO3ZhciBiPVtdO2E9U3RyaW5nKGEpO00odGhpcy5pLGZ1bmN0aW9uKGMpe2NbMF0hPT1hJiZiLnB1c2goYyl9KTt0aGlzLmk9Yn07aC5lbnRyaWVzPWZ1bmN0aW9uIGIoKXt2YXIgYyxkPXRoaXM7cmV0dXJuIEsoYixmdW5jdGlvbihlKXsxPT1lLmgmJihjPTApO2lmKDMhPWUuaClyZXR1cm4gYzxkLmkubGVuZ3RoP2U9RShlLGQuaVtjXSk6KGUuaD0wLGU9dm9pZCAwKSxlO2MrKztlLmg9Mn0pfTtoLmZvckVhY2g9ZnVuY3Rpb24oYixjKXtQKGFyZ3VtZW50cywxKTtmb3IodmFyIGQ9dih0aGlzKSxlPWQubmV4dCgpOyFlLmRvbmU7ZT1kLm5leHQoKSl7dmFyIGY9dihlLnZhbHVlKTtlPWYubmV4dCgpLnZhbHVlO2Y9Zi5uZXh0KCkudmFsdWU7Yi5jYWxsKGMsZixlLHRoaXMpfX07aC5nZXQ9ZnVuY3Rpb24oYil7UChhcmd1bWVudHMsMSk7dmFyIGM9dGhpcy5pO2I9U3RyaW5nKGIpO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKGNbZF1bMF09PT1iKXJldHVybiBjW2RdWzFdO1xucmV0dXJuIG51bGx9O2guZ2V0QWxsPWZ1bmN0aW9uKGIpe1AoYXJndW1lbnRzLDEpO3ZhciBjPVtdO2I9U3RyaW5nKGIpO00odGhpcy5pLGZ1bmN0aW9uKGQpe2RbMF09PT1iJiZjLnB1c2goZFsxXSl9KTtyZXR1cm4gY307aC5oYXM9ZnVuY3Rpb24oYil7UChhcmd1bWVudHMsMSk7Yj1TdHJpbmcoYik7Zm9yKHZhciBjPTA7Yzx0aGlzLmkubGVuZ3RoO2MrKylpZih0aGlzLmlbY11bMF09PT1iKXJldHVybiEwO3JldHVybiExfTtoLmtleXM9ZnVuY3Rpb24gYygpe3ZhciBkPXRoaXMsZSxmLGcsayxwO3JldHVybiBLKGMsZnVuY3Rpb24odCl7MT09dC5oJiYoZT12KGQpLGY9ZS5uZXh0KCkpO2lmKDMhPXQuaCl7aWYoZi5kb25lKXt0Lmg9MDtyZXR1cm59Zz1mLnZhbHVlO2s9dihnKTtwPWsubmV4dCgpLnZhbHVlO3JldHVybiBFKHQscCl9Zj1lLm5leHQoKTt0Lmg9Mn0pfTtoLnNldD1mdW5jdGlvbihjLGQsZSl7UChhcmd1bWVudHMsMik7Yz1TdHJpbmcoYyk7dmFyIGY9W10sZz1PKGMsXG5kLGUpLGs9ITA7TSh0aGlzLmksZnVuY3Rpb24ocCl7cFswXT09PWM/ayYmKGs9IWYucHVzaChnKSk6Zi5wdXNoKHApfSk7ayYmZi5wdXNoKGcpO3RoaXMuaT1mfTtoLnZhbHVlcz1mdW5jdGlvbiBkKCl7dmFyIGU9dGhpcyxmLGcsayxwLHQ7cmV0dXJuIEsoZCxmdW5jdGlvbih4KXsxPT14LmgmJihmPXYoZSksZz1mLm5leHQoKSk7aWYoMyE9eC5oKXtpZihnLmRvbmUpe3guaD0wO3JldHVybn1rPWcudmFsdWU7cD12KGspO3AubmV4dCgpO3Q9cC5uZXh0KCkudmFsdWU7cmV0dXJuIEUoeCx0KX1nPWYubmV4dCgpO3guaD0yfSl9O1gucHJvdG90eXBlLl9hc05hdGl2ZT1mdW5jdGlvbigpe2Zvcih2YXIgZD1uZXcgUixlPXYodGhpcyksZj1lLm5leHQoKTshZi5kb25lO2Y9ZS5uZXh0KCkpe3ZhciBnPXYoZi52YWx1ZSk7Zj1nLm5leHQoKS52YWx1ZTtnPWcubmV4dCgpLnZhbHVlO2QuYXBwZW5kKGYsZyl9cmV0dXJuIGR9O1gucHJvdG90eXBlLl9ibG9iPWZ1bmN0aW9uKCl7dmFyIGQ9XCItLS0tZm9ybWRhdGEtcG9seWZpbGwtXCIrXG5NYXRoLnJhbmRvbSgpLGU9W10sZj1cIi0tXCIrZCsnXFxyXFxuQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiJzt0aGlzLmZvckVhY2goZnVuY3Rpb24oZyxrKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZz9lLnB1c2goZitlc2NhcGUoTihrKSkrKCdcIlxcclxcblxcclxcbicrTihnKStcIlxcclxcblwiKSk6ZS5wdXNoKGYrZXNjYXBlKE4oaykpKygnXCI7IGZpbGVuYW1lPVwiJytlc2NhcGUoZy5uYW1lKSsnXCJcXHJcXG5Db250ZW50LVR5cGU6ICcrKGcudHlwZXx8XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIikrXCJcXHJcXG5cXHJcXG5cIiksZyxcIlxcclxcblwiKX0pO2UucHVzaChcIi0tXCIrZCtcIi0tXCIpO3JldHVybiBuZXcgQmxvYihlLHt0eXBlOlwibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9XCIrZH0pfTtYLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfTtYLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBGb3JtRGF0YV1cIn07XG5WJiYhVi5tYXRjaGVzJiYoVi5tYXRjaGVzPVYubWF0Y2hlc1NlbGVjdG9yfHxWLm1vek1hdGNoZXNTZWxlY3Rvcnx8Vi5tc01hdGNoZXNTZWxlY3Rvcnx8Vi5vTWF0Y2hlc1NlbGVjdG9yfHxWLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8ZnVuY3Rpb24oZCl7ZD0odGhpcy5kb2N1bWVudHx8dGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKGQpO2Zvcih2YXIgZT1kLmxlbmd0aDswPD0tLWUmJmQuaXRlbShlKSE9PXRoaXM7KTtyZXR1cm4tMTxlfSk7VyYmKFgucHJvdG90eXBlW1ddPVwiRm9ybURhdGFcIik7aWYoUyl7dmFyIFk9US5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2V0UmVxdWVzdEhlYWRlcjtRLlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGQsZSl7WS5jYWxsKHRoaXMsZCxlKTtcImNvbnRlbnQtdHlwZVwiPT09ZC50b0xvd2VyQ2FzZSgpJiYodGhpcy5CPSEwKX07US5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZD1cbmZ1bmN0aW9uKGQpe2QgaW5zdGFuY2VvZiBYPyhkPWQuX2Jsb2IoKSx0aGlzLkJ8fHRoaXMuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLGQudHlwZSksUy5jYWxsKHRoaXMsZCkpOlMuY2FsbCh0aGlzLGQpfX1UJiYoUS5mZXRjaD1mdW5jdGlvbihkLGUpe2UmJmUuYm9keSYmZS5ib2R5IGluc3RhbmNlb2YgWCYmKGUuYm9keT1lLmJvZHkuX2Jsb2IoKSk7cmV0dXJuIFQuY2FsbCh0aGlzLGQsZSl9KTtVJiYoUS5uYXZpZ2F0b3Iuc2VuZEJlYWNvbj1mdW5jdGlvbihkLGUpe2UgaW5zdGFuY2VvZiBYJiYoZT1lLl9hc05hdGl2ZSgpKTtyZXR1cm4gVS5jYWxsKHRoaXMsZCxlKX0pO1EuRm9ybURhdGE9WH07fSkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../../node_modules/formdata-polyfill/formdata.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/formie": 0,
/******/ 			"css/fields/phone-country": 0,
/******/ 			"css/fields/tags": 0,
/******/ 			"css/formie-theme": 0,
/******/ 			"css/formie-base": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["formieConfigChunkLoadingGlobal"] = self["formieConfigChunkLoadingGlobal"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/js/formie.js")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-base.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/formie-theme.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/phone-country.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/fields/phone-country","css/fields/tags","css/formie-theme","css/formie-base"], () => (__webpack_require__("./src/scss/fields/tags.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;